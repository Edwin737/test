The system is: Linux - 4.15.0-54-generic - x86_64
Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
Compiler: /usr/bin/cc 
Build flags: 
Id flags: 

The output was:
0


Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "a.out"

The C compiler identification is GNU, found in "/opt/sample_release/inference_engine_samples_build/CMakeFiles/3.5.1/CompilerIdC/a.out"

Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
Compiler: /usr/bin/c++ 
Build flags: 
Id flags: 

The output was:
0


Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "a.out"

The CXX compiler identification is GNU, found in "/opt/sample_release/inference_engine_samples_build/CMakeFiles/3.5.1/CompilerIdCXX/a.out"

Determining if the C compiler works passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_690ae/fast"
/usr/bin/make -f CMakeFiles/cmTC_690ae.dir/build.make CMakeFiles/cmTC_690ae.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_690ae.dir/testCCompiler.c.o
/usr/bin/cc     -o CMakeFiles/cmTC_690ae.dir/testCCompiler.c.o   -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/testCCompiler.c
Linking C executable cmTC_690ae
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_690ae.dir/link.txt --verbose=1
/usr/bin/cc       CMakeFiles/cmTC_690ae.dir/testCCompiler.c.o  -o cmTC_690ae -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Detecting C compiler ABI info compiled with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_1808b/fast"
/usr/bin/make -f CMakeFiles/cmTC_1808b.dir/build.make CMakeFiles/cmTC_1808b.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_1808b.dir/CMakeCCompilerABI.c.o
/usr/bin/cc     -o CMakeFiles/cmTC_1808b.dir/CMakeCCompilerABI.c.o   -c /usr/share/cmake-3.5/Modules/CMakeCCompilerABI.c
Linking C executable cmTC_1808b
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_1808b.dir/link.txt --verbose=1
/usr/bin/cc      -v CMakeFiles/cmTC_1808b.dir/CMakeCCompilerABI.c.o  -o cmTC_1808b -rdynamic  
Using built-in specs.
COLLECT_GCC=/usr/bin/cc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 5.4.0-6ubuntu1~16.04.11' --with-bugurl=file:///usr/share/doc/gcc-5/README.Bugs --enable-languages=c,ada,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-5 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-5-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-5-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-5-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
Thread model: posix
gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.11) 
COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/
LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../:/lib/:/usr/lib/
COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_1808b' '-rdynamic' '-mtune=generic' '-march=x86-64'
 /usr/lib/gcc/x86_64-linux-gnu/5/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/5/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper -plugin-opt=-fresolution=/tmp/ccMiEmI8.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -export-dynamic -dynamic-linker /lib64/ld-linux-x86-64.so.2 -z relro -o cmTC_1808b /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o -L/usr/lib/gcc/x86_64-linux-gnu/5 -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. CMakeFiles/cmTC_1808b.dir/CMakeCCompilerABI.c.o -lgcc --as-needed -lgcc_s --no-as-needed -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/lib/gcc/x86_64-linux-gnu/5/crtend.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Parsed C implicit link information from above output:
  link line regex: [^( *|.*[/\])(ld|([^/\]+-)?ld|collect2)[^/\]*( |$)]
  ignore line: [Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp]
  ignore line: []
  ignore line: [Run Build Command:"/usr/bin/make" "cmTC_1808b/fast"]
  ignore line: [/usr/bin/make -f CMakeFiles/cmTC_1808b.dir/build.make CMakeFiles/cmTC_1808b.dir/build]
  ignore line: [make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp']
  ignore line: [Building C object CMakeFiles/cmTC_1808b.dir/CMakeCCompilerABI.c.o]
  ignore line: [/usr/bin/cc     -o CMakeFiles/cmTC_1808b.dir/CMakeCCompilerABI.c.o   -c /usr/share/cmake-3.5/Modules/CMakeCCompilerABI.c]
  ignore line: [Linking C executable cmTC_1808b]
  ignore line: [/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_1808b.dir/link.txt --verbose=1]
  ignore line: [/usr/bin/cc      -v CMakeFiles/cmTC_1808b.dir/CMakeCCompilerABI.c.o  -o cmTC_1808b -rdynamic  ]
  ignore line: [Using built-in specs.]
  ignore line: [COLLECT_GCC=/usr/bin/cc]
  ignore line: [COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper]
  ignore line: [Target: x86_64-linux-gnu]
  ignore line: [Configured with: ../src/configure -v --with-pkgversion='Ubuntu 5.4.0-6ubuntu1~16.04.11' --with-bugurl=file:///usr/share/doc/gcc-5/README.Bugs --enable-languages=c,ada,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-5 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-5-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-5-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-5-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu]
  ignore line: [Thread model: posix]
  ignore line: [gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.11) ]
  ignore line: [COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/]
  ignore line: [LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../:/lib/:/usr/lib/]
  ignore line: [COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_1808b' '-rdynamic' '-mtune=generic' '-march=x86-64']
  link line: [ /usr/lib/gcc/x86_64-linux-gnu/5/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/5/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper -plugin-opt=-fresolution=/tmp/ccMiEmI8.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -export-dynamic -dynamic-linker /lib64/ld-linux-x86-64.so.2 -z relro -o cmTC_1808b /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o -L/usr/lib/gcc/x86_64-linux-gnu/5 -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. CMakeFiles/cmTC_1808b.dir/CMakeCCompilerABI.c.o -lgcc --as-needed -lgcc_s --no-as-needed -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/lib/gcc/x86_64-linux-gnu/5/crtend.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o]
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/collect2] ==> ignore
    arg [-plugin] ==> ignore
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/liblto_plugin.so] ==> ignore
    arg [-plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper] ==> ignore
    arg [-plugin-opt=-fresolution=/tmp/ccMiEmI8.res] ==> ignore
    arg [-plugin-opt=-pass-through=-lgcc] ==> ignore
    arg [-plugin-opt=-pass-through=-lgcc_s] ==> ignore
    arg [-plugin-opt=-pass-through=-lc] ==> ignore
    arg [-plugin-opt=-pass-through=-lgcc] ==> ignore
    arg [-plugin-opt=-pass-through=-lgcc_s] ==> ignore
    arg [--sysroot=/] ==> ignore
    arg [--build-id] ==> ignore
    arg [--eh-frame-hdr] ==> ignore
    arg [-m] ==> ignore
    arg [elf_x86_64] ==> ignore
    arg [--hash-style=gnu] ==> ignore
    arg [--as-needed] ==> ignore
    arg [-export-dynamic] ==> ignore
    arg [-dynamic-linker] ==> ignore
    arg [/lib64/ld-linux-x86-64.so.2] ==> ignore
    arg [-zrelro] ==> ignore
    arg [-o] ==> ignore
    arg [cmTC_1808b] ==> ignore
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o] ==> ignore
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o] ==> ignore
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o] ==> ignore
    arg [-L/usr/lib/gcc/x86_64-linux-gnu/5] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5]
    arg [-L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu]
    arg [-L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib]
    arg [-L/lib/x86_64-linux-gnu] ==> dir [/lib/x86_64-linux-gnu]
    arg [-L/lib/../lib] ==> dir [/lib/../lib]
    arg [-L/usr/lib/x86_64-linux-gnu] ==> dir [/usr/lib/x86_64-linux-gnu]
    arg [-L/usr/lib/../lib] ==> dir [/usr/lib/../lib]
    arg [-L/usr/lib/gcc/x86_64-linux-gnu/5/../../..] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../..]
    arg [CMakeFiles/cmTC_1808b.dir/CMakeCCompilerABI.c.o] ==> ignore
    arg [-lgcc] ==> lib [gcc]
    arg [--as-needed] ==> ignore
    arg [-lgcc_s] ==> lib [gcc_s]
    arg [--no-as-needed] ==> ignore
    arg [-lc] ==> lib [c]
    arg [-lgcc] ==> lib [gcc]
    arg [--as-needed] ==> ignore
    arg [-lgcc_s] ==> lib [gcc_s]
    arg [--no-as-needed] ==> ignore
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/crtend.o] ==> ignore
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o] ==> ignore
  remove lib [gcc]
  remove lib [gcc_s]
  remove lib [gcc]
  remove lib [gcc_s]
  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/5] ==> [/usr/lib/gcc/x86_64-linux-gnu/5]
  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu] ==> [/usr/lib/x86_64-linux-gnu]
  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib] ==> [/usr/lib]
  collapse library dir [/lib/x86_64-linux-gnu] ==> [/lib/x86_64-linux-gnu]
  collapse library dir [/lib/../lib] ==> [/lib]
  collapse library dir [/usr/lib/x86_64-linux-gnu] ==> [/usr/lib/x86_64-linux-gnu]
  collapse library dir [/usr/lib/../lib] ==> [/usr/lib]
  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../..] ==> [/usr/lib]
  implicit libs: [c]
  implicit dirs: [/usr/lib/gcc/x86_64-linux-gnu/5;/usr/lib/x86_64-linux-gnu;/usr/lib;/lib/x86_64-linux-gnu;/lib]
  implicit fwks: []




Detecting C [-std=c11] compiler features compiled with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_835e1/fast"
/usr/bin/make -f CMakeFiles/cmTC_835e1.dir/build.make CMakeFiles/cmTC_835e1.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_835e1.dir/feature_tests.c.o
/usr/bin/cc    -std=c11 -o CMakeFiles/cmTC_835e1.dir/feature_tests.c.o   -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/feature_tests.c
Linking C executable cmTC_835e1
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_835e1.dir/link.txt --verbose=1
/usr/bin/cc       CMakeFiles/cmTC_835e1.dir/feature_tests.c.o  -o cmTC_835e1 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


    Feature record: C_FEATURE:1c_function_prototypes
    Feature record: C_FEATURE:1c_restrict
    Feature record: C_FEATURE:1c_static_assert
    Feature record: C_FEATURE:1c_variadic_macros


Detecting C [-std=c99] compiler features compiled with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_4ca58/fast"
/usr/bin/make -f CMakeFiles/cmTC_4ca58.dir/build.make CMakeFiles/cmTC_4ca58.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_4ca58.dir/feature_tests.c.o
/usr/bin/cc    -std=c99 -o CMakeFiles/cmTC_4ca58.dir/feature_tests.c.o   -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/feature_tests.c
Linking C executable cmTC_4ca58
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_4ca58.dir/link.txt --verbose=1
/usr/bin/cc       CMakeFiles/cmTC_4ca58.dir/feature_tests.c.o  -o cmTC_4ca58 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


    Feature record: C_FEATURE:1c_function_prototypes
    Feature record: C_FEATURE:1c_restrict
    Feature record: C_FEATURE:0c_static_assert
    Feature record: C_FEATURE:1c_variadic_macros


Detecting C [-std=c90] compiler features compiled with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_12d90/fast"
/usr/bin/make -f CMakeFiles/cmTC_12d90.dir/build.make CMakeFiles/cmTC_12d90.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_12d90.dir/feature_tests.c.o
/usr/bin/cc    -std=c90 -o CMakeFiles/cmTC_12d90.dir/feature_tests.c.o   -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/feature_tests.c
Linking C executable cmTC_12d90
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_12d90.dir/link.txt --verbose=1
/usr/bin/cc       CMakeFiles/cmTC_12d90.dir/feature_tests.c.o  -o cmTC_12d90 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


    Feature record: C_FEATURE:1c_function_prototypes
    Feature record: C_FEATURE:0c_restrict
    Feature record: C_FEATURE:0c_static_assert
    Feature record: C_FEATURE:0c_variadic_macros
Determining if the CXX compiler works passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_0bac5/fast"
/usr/bin/make -f CMakeFiles/cmTC_0bac5.dir/build.make CMakeFiles/cmTC_0bac5.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_0bac5.dir/testCXXCompiler.cxx.o
/usr/bin/c++      -o CMakeFiles/cmTC_0bac5.dir/testCXXCompiler.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/testCXXCompiler.cxx
Linking CXX executable cmTC_0bac5
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_0bac5.dir/link.txt --verbose=1
/usr/bin/c++        CMakeFiles/cmTC_0bac5.dir/testCXXCompiler.cxx.o  -o cmTC_0bac5 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Detecting CXX compiler ABI info compiled with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_6156b/fast"
/usr/bin/make -f CMakeFiles/cmTC_6156b.dir/build.make CMakeFiles/cmTC_6156b.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_6156b.dir/CMakeCXXCompilerABI.cpp.o
/usr/bin/c++      -o CMakeFiles/cmTC_6156b.dir/CMakeCXXCompilerABI.cpp.o -c /usr/share/cmake-3.5/Modules/CMakeCXXCompilerABI.cpp
Linking CXX executable cmTC_6156b
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_6156b.dir/link.txt --verbose=1
/usr/bin/c++       -v CMakeFiles/cmTC_6156b.dir/CMakeCXXCompilerABI.cpp.o  -o cmTC_6156b -rdynamic  
Using built-in specs.
COLLECT_GCC=/usr/bin/c++
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 5.4.0-6ubuntu1~16.04.11' --with-bugurl=file:///usr/share/doc/gcc-5/README.Bugs --enable-languages=c,ada,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-5 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-5-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-5-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-5-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
Thread model: posix
gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.11) 
COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/
LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../:/lib/:/usr/lib/
COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_6156b' '-rdynamic' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
 /usr/lib/gcc/x86_64-linux-gnu/5/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/5/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper -plugin-opt=-fresolution=/tmp/cccQ4hox.res -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -export-dynamic -dynamic-linker /lib64/ld-linux-x86-64.so.2 -z relro -o cmTC_6156b /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o -L/usr/lib/gcc/x86_64-linux-gnu/5 -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. CMakeFiles/cmTC_6156b.dir/CMakeCXXCompilerABI.cpp.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-linux-gnu/5/crtend.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Parsed CXX implicit link information from above output:
  link line regex: [^( *|.*[/\])(ld|([^/\]+-)?ld|collect2)[^/\]*( |$)]
  ignore line: [Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp]
  ignore line: []
  ignore line: [Run Build Command:"/usr/bin/make" "cmTC_6156b/fast"]
  ignore line: [/usr/bin/make -f CMakeFiles/cmTC_6156b.dir/build.make CMakeFiles/cmTC_6156b.dir/build]
  ignore line: [make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp']
  ignore line: [Building CXX object CMakeFiles/cmTC_6156b.dir/CMakeCXXCompilerABI.cpp.o]
  ignore line: [/usr/bin/c++      -o CMakeFiles/cmTC_6156b.dir/CMakeCXXCompilerABI.cpp.o -c /usr/share/cmake-3.5/Modules/CMakeCXXCompilerABI.cpp]
  ignore line: [Linking CXX executable cmTC_6156b]
  ignore line: [/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_6156b.dir/link.txt --verbose=1]
  ignore line: [/usr/bin/c++       -v CMakeFiles/cmTC_6156b.dir/CMakeCXXCompilerABI.cpp.o  -o cmTC_6156b -rdynamic  ]
  ignore line: [Using built-in specs.]
  ignore line: [COLLECT_GCC=/usr/bin/c++]
  ignore line: [COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper]
  ignore line: [Target: x86_64-linux-gnu]
  ignore line: [Configured with: ../src/configure -v --with-pkgversion='Ubuntu 5.4.0-6ubuntu1~16.04.11' --with-bugurl=file:///usr/share/doc/gcc-5/README.Bugs --enable-languages=c,ada,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-5 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-5-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-5-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-5-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu]
  ignore line: [Thread model: posix]
  ignore line: [gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.11) ]
  ignore line: [COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/]
  ignore line: [LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/5/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/5/../../../:/lib/:/usr/lib/]
  ignore line: [COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_6156b' '-rdynamic' '-shared-libgcc' '-mtune=generic' '-march=x86-64']
  link line: [ /usr/lib/gcc/x86_64-linux-gnu/5/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/5/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper -plugin-opt=-fresolution=/tmp/cccQ4hox.res -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -export-dynamic -dynamic-linker /lib64/ld-linux-x86-64.so.2 -z relro -o cmTC_6156b /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o -L/usr/lib/gcc/x86_64-linux-gnu/5 -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. CMakeFiles/cmTC_6156b.dir/CMakeCXXCompilerABI.cpp.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-linux-gnu/5/crtend.o /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o]
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/collect2] ==> ignore
    arg [-plugin] ==> ignore
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/liblto_plugin.so] ==> ignore
    arg [-plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper] ==> ignore
    arg [-plugin-opt=-fresolution=/tmp/cccQ4hox.res] ==> ignore
    arg [-plugin-opt=-pass-through=-lgcc_s] ==> ignore
    arg [-plugin-opt=-pass-through=-lgcc] ==> ignore
    arg [-plugin-opt=-pass-through=-lc] ==> ignore
    arg [-plugin-opt=-pass-through=-lgcc_s] ==> ignore
    arg [-plugin-opt=-pass-through=-lgcc] ==> ignore
    arg [--sysroot=/] ==> ignore
    arg [--build-id] ==> ignore
    arg [--eh-frame-hdr] ==> ignore
    arg [-m] ==> ignore
    arg [elf_x86_64] ==> ignore
    arg [--hash-style=gnu] ==> ignore
    arg [--as-needed] ==> ignore
    arg [-export-dynamic] ==> ignore
    arg [-dynamic-linker] ==> ignore
    arg [/lib64/ld-linux-x86-64.so.2] ==> ignore
    arg [-zrelro] ==> ignore
    arg [-o] ==> ignore
    arg [cmTC_6156b] ==> ignore
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o] ==> ignore
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o] ==> ignore
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o] ==> ignore
    arg [-L/usr/lib/gcc/x86_64-linux-gnu/5] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5]
    arg [-L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu]
    arg [-L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib]
    arg [-L/lib/x86_64-linux-gnu] ==> dir [/lib/x86_64-linux-gnu]
    arg [-L/lib/../lib] ==> dir [/lib/../lib]
    arg [-L/usr/lib/x86_64-linux-gnu] ==> dir [/usr/lib/x86_64-linux-gnu]
    arg [-L/usr/lib/../lib] ==> dir [/usr/lib/../lib]
    arg [-L/usr/lib/gcc/x86_64-linux-gnu/5/../../..] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../..]
    arg [CMakeFiles/cmTC_6156b.dir/CMakeCXXCompilerABI.cpp.o] ==> ignore
    arg [-lstdc++] ==> lib [stdc++]
    arg [-lm] ==> lib [m]
    arg [-lgcc_s] ==> lib [gcc_s]
    arg [-lgcc] ==> lib [gcc]
    arg [-lc] ==> lib [c]
    arg [-lgcc_s] ==> lib [gcc_s]
    arg [-lgcc] ==> lib [gcc]
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/crtend.o] ==> ignore
    arg [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o] ==> ignore
  remove lib [gcc_s]
  remove lib [gcc]
  remove lib [gcc_s]
  remove lib [gcc]
  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/5] ==> [/usr/lib/gcc/x86_64-linux-gnu/5]
  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu] ==> [/usr/lib/x86_64-linux-gnu]
  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib] ==> [/usr/lib]
  collapse library dir [/lib/x86_64-linux-gnu] ==> [/lib/x86_64-linux-gnu]
  collapse library dir [/lib/../lib] ==> [/lib]
  collapse library dir [/usr/lib/x86_64-linux-gnu] ==> [/usr/lib/x86_64-linux-gnu]
  collapse library dir [/usr/lib/../lib] ==> [/usr/lib]
  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/5/../../..] ==> [/usr/lib]
  implicit libs: [stdc++;m;c]
  implicit dirs: [/usr/lib/gcc/x86_64-linux-gnu/5;/usr/lib/x86_64-linux-gnu;/usr/lib;/lib/x86_64-linux-gnu;/lib]
  implicit fwks: []




Detecting CXX [-std=c++14] compiler features compiled with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_02458/fast"
/usr/bin/make -f CMakeFiles/cmTC_02458.dir/build.make CMakeFiles/cmTC_02458.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_02458.dir/feature_tests.cxx.o
/usr/bin/c++     -std=c++14 -o CMakeFiles/cmTC_02458.dir/feature_tests.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/feature_tests.cxx
Linking CXX executable cmTC_02458
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_02458.dir/link.txt --verbose=1
/usr/bin/c++        CMakeFiles/cmTC_02458.dir/feature_tests.cxx.o  -o cmTC_02458 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


    Feature record: CXX_FEATURE:1cxx_aggregate_default_initializers
    Feature record: CXX_FEATURE:1cxx_alias_templates
    Feature record: CXX_FEATURE:1cxx_alignas
    Feature record: CXX_FEATURE:1cxx_alignof
    Feature record: CXX_FEATURE:1cxx_attributes
    Feature record: CXX_FEATURE:1cxx_attribute_deprecated
    Feature record: CXX_FEATURE:1cxx_auto_type
    Feature record: CXX_FEATURE:1cxx_binary_literals
    Feature record: CXX_FEATURE:1cxx_constexpr
    Feature record: CXX_FEATURE:1cxx_contextual_conversions
    Feature record: CXX_FEATURE:1cxx_decltype
    Feature record: CXX_FEATURE:1cxx_decltype_auto
    Feature record: CXX_FEATURE:1cxx_decltype_incomplete_return_types
    Feature record: CXX_FEATURE:1cxx_default_function_template_args
    Feature record: CXX_FEATURE:1cxx_defaulted_functions
    Feature record: CXX_FEATURE:1cxx_defaulted_move_initializers
    Feature record: CXX_FEATURE:1cxx_delegating_constructors
    Feature record: CXX_FEATURE:1cxx_deleted_functions
    Feature record: CXX_FEATURE:1cxx_digit_separators
    Feature record: CXX_FEATURE:1cxx_enum_forward_declarations
    Feature record: CXX_FEATURE:1cxx_explicit_conversions
    Feature record: CXX_FEATURE:1cxx_extended_friend_declarations
    Feature record: CXX_FEATURE:1cxx_extern_templates
    Feature record: CXX_FEATURE:1cxx_final
    Feature record: CXX_FEATURE:1cxx_func_identifier
    Feature record: CXX_FEATURE:1cxx_generalized_initializers
    Feature record: CXX_FEATURE:1cxx_generic_lambdas
    Feature record: CXX_FEATURE:1cxx_inheriting_constructors
    Feature record: CXX_FEATURE:1cxx_inline_namespaces
    Feature record: CXX_FEATURE:1cxx_lambdas
    Feature record: CXX_FEATURE:1cxx_lambda_init_captures
    Feature record: CXX_FEATURE:1cxx_local_type_template_args
    Feature record: CXX_FEATURE:1cxx_long_long_type
    Feature record: CXX_FEATURE:1cxx_noexcept
    Feature record: CXX_FEATURE:1cxx_nonstatic_member_init
    Feature record: CXX_FEATURE:1cxx_nullptr
    Feature record: CXX_FEATURE:1cxx_override
    Feature record: CXX_FEATURE:1cxx_range_for
    Feature record: CXX_FEATURE:1cxx_raw_string_literals
    Feature record: CXX_FEATURE:1cxx_reference_qualified_functions
    Feature record: CXX_FEATURE:1cxx_relaxed_constexpr
    Feature record: CXX_FEATURE:1cxx_return_type_deduction
    Feature record: CXX_FEATURE:1cxx_right_angle_brackets
    Feature record: CXX_FEATURE:1cxx_rvalue_references
    Feature record: CXX_FEATURE:1cxx_sizeof_member
    Feature record: CXX_FEATURE:1cxx_static_assert
    Feature record: CXX_FEATURE:1cxx_strong_enums
    Feature record: CXX_FEATURE:1cxx_template_template_parameters
    Feature record: CXX_FEATURE:1cxx_thread_local
    Feature record: CXX_FEATURE:1cxx_trailing_return_types
    Feature record: CXX_FEATURE:1cxx_unicode_literals
    Feature record: CXX_FEATURE:1cxx_uniform_initialization
    Feature record: CXX_FEATURE:1cxx_unrestricted_unions
    Feature record: CXX_FEATURE:1cxx_user_literals
    Feature record: CXX_FEATURE:1cxx_variable_templates
    Feature record: CXX_FEATURE:1cxx_variadic_macros
    Feature record: CXX_FEATURE:1cxx_variadic_templates


Detecting CXX [-std=c++11] compiler features compiled with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_5e403/fast"
/usr/bin/make -f CMakeFiles/cmTC_5e403.dir/build.make CMakeFiles/cmTC_5e403.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_5e403.dir/feature_tests.cxx.o
/usr/bin/c++     -std=c++11 -o CMakeFiles/cmTC_5e403.dir/feature_tests.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/feature_tests.cxx
Linking CXX executable cmTC_5e403
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5e403.dir/link.txt --verbose=1
/usr/bin/c++        CMakeFiles/cmTC_5e403.dir/feature_tests.cxx.o  -o cmTC_5e403 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


    Feature record: CXX_FEATURE:0cxx_aggregate_default_initializers
    Feature record: CXX_FEATURE:1cxx_alias_templates
    Feature record: CXX_FEATURE:1cxx_alignas
    Feature record: CXX_FEATURE:1cxx_alignof
    Feature record: CXX_FEATURE:1cxx_attributes
    Feature record: CXX_FEATURE:0cxx_attribute_deprecated
    Feature record: CXX_FEATURE:1cxx_auto_type
    Feature record: CXX_FEATURE:0cxx_binary_literals
    Feature record: CXX_FEATURE:1cxx_constexpr
    Feature record: CXX_FEATURE:0cxx_contextual_conversions
    Feature record: CXX_FEATURE:1cxx_decltype
    Feature record: CXX_FEATURE:0cxx_decltype_auto
    Feature record: CXX_FEATURE:1cxx_decltype_incomplete_return_types
    Feature record: CXX_FEATURE:1cxx_default_function_template_args
    Feature record: CXX_FEATURE:1cxx_defaulted_functions
    Feature record: CXX_FEATURE:1cxx_defaulted_move_initializers
    Feature record: CXX_FEATURE:1cxx_delegating_constructors
    Feature record: CXX_FEATURE:1cxx_deleted_functions
    Feature record: CXX_FEATURE:0cxx_digit_separators
    Feature record: CXX_FEATURE:1cxx_enum_forward_declarations
    Feature record: CXX_FEATURE:1cxx_explicit_conversions
    Feature record: CXX_FEATURE:1cxx_extended_friend_declarations
    Feature record: CXX_FEATURE:1cxx_extern_templates
    Feature record: CXX_FEATURE:1cxx_final
    Feature record: CXX_FEATURE:1cxx_func_identifier
    Feature record: CXX_FEATURE:1cxx_generalized_initializers
    Feature record: CXX_FEATURE:0cxx_generic_lambdas
    Feature record: CXX_FEATURE:1cxx_inheriting_constructors
    Feature record: CXX_FEATURE:1cxx_inline_namespaces
    Feature record: CXX_FEATURE:1cxx_lambdas
    Feature record: CXX_FEATURE:0cxx_lambda_init_captures
    Feature record: CXX_FEATURE:1cxx_local_type_template_args
    Feature record: CXX_FEATURE:1cxx_long_long_type
    Feature record: CXX_FEATURE:1cxx_noexcept
    Feature record: CXX_FEATURE:1cxx_nonstatic_member_init
    Feature record: CXX_FEATURE:1cxx_nullptr
    Feature record: CXX_FEATURE:1cxx_override
    Feature record: CXX_FEATURE:1cxx_range_for
    Feature record: CXX_FEATURE:1cxx_raw_string_literals
    Feature record: CXX_FEATURE:1cxx_reference_qualified_functions
    Feature record: CXX_FEATURE:0cxx_relaxed_constexpr
    Feature record: CXX_FEATURE:0cxx_return_type_deduction
    Feature record: CXX_FEATURE:1cxx_right_angle_brackets
    Feature record: CXX_FEATURE:1cxx_rvalue_references
    Feature record: CXX_FEATURE:1cxx_sizeof_member
    Feature record: CXX_FEATURE:1cxx_static_assert
    Feature record: CXX_FEATURE:1cxx_strong_enums
    Feature record: CXX_FEATURE:1cxx_template_template_parameters
    Feature record: CXX_FEATURE:1cxx_thread_local
    Feature record: CXX_FEATURE:1cxx_trailing_return_types
    Feature record: CXX_FEATURE:1cxx_unicode_literals
    Feature record: CXX_FEATURE:1cxx_uniform_initialization
    Feature record: CXX_FEATURE:1cxx_unrestricted_unions
    Feature record: CXX_FEATURE:1cxx_user_literals
    Feature record: CXX_FEATURE:0cxx_variable_templates
    Feature record: CXX_FEATURE:1cxx_variadic_macros
    Feature record: CXX_FEATURE:1cxx_variadic_templates


Detecting CXX [-std=c++98] compiler features compiled with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_8a8df/fast"
/usr/bin/make -f CMakeFiles/cmTC_8a8df.dir/build.make CMakeFiles/cmTC_8a8df.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_8a8df.dir/feature_tests.cxx.o
/usr/bin/c++     -std=c++98 -o CMakeFiles/cmTC_8a8df.dir/feature_tests.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/feature_tests.cxx
Linking CXX executable cmTC_8a8df
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_8a8df.dir/link.txt --verbose=1
/usr/bin/c++        CMakeFiles/cmTC_8a8df.dir/feature_tests.cxx.o  -o cmTC_8a8df -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


    Feature record: CXX_FEATURE:0cxx_aggregate_default_initializers
    Feature record: CXX_FEATURE:0cxx_alias_templates
    Feature record: CXX_FEATURE:0cxx_alignas
    Feature record: CXX_FEATURE:0cxx_alignof
    Feature record: CXX_FEATURE:0cxx_attributes
    Feature record: CXX_FEATURE:0cxx_attribute_deprecated
    Feature record: CXX_FEATURE:0cxx_auto_type
    Feature record: CXX_FEATURE:0cxx_binary_literals
    Feature record: CXX_FEATURE:0cxx_constexpr
    Feature record: CXX_FEATURE:0cxx_contextual_conversions
    Feature record: CXX_FEATURE:0cxx_decltype
    Feature record: CXX_FEATURE:0cxx_decltype_auto
    Feature record: CXX_FEATURE:0cxx_decltype_incomplete_return_types
    Feature record: CXX_FEATURE:0cxx_default_function_template_args
    Feature record: CXX_FEATURE:0cxx_defaulted_functions
    Feature record: CXX_FEATURE:0cxx_defaulted_move_initializers
    Feature record: CXX_FEATURE:0cxx_delegating_constructors
    Feature record: CXX_FEATURE:0cxx_deleted_functions
    Feature record: CXX_FEATURE:0cxx_digit_separators
    Feature record: CXX_FEATURE:0cxx_enum_forward_declarations
    Feature record: CXX_FEATURE:0cxx_explicit_conversions
    Feature record: CXX_FEATURE:0cxx_extended_friend_declarations
    Feature record: CXX_FEATURE:0cxx_extern_templates
    Feature record: CXX_FEATURE:0cxx_final
    Feature record: CXX_FEATURE:0cxx_func_identifier
    Feature record: CXX_FEATURE:0cxx_generalized_initializers
    Feature record: CXX_FEATURE:0cxx_generic_lambdas
    Feature record: CXX_FEATURE:0cxx_inheriting_constructors
    Feature record: CXX_FEATURE:0cxx_inline_namespaces
    Feature record: CXX_FEATURE:0cxx_lambdas
    Feature record: CXX_FEATURE:0cxx_lambda_init_captures
    Feature record: CXX_FEATURE:0cxx_local_type_template_args
    Feature record: CXX_FEATURE:0cxx_long_long_type
    Feature record: CXX_FEATURE:0cxx_noexcept
    Feature record: CXX_FEATURE:0cxx_nonstatic_member_init
    Feature record: CXX_FEATURE:0cxx_nullptr
    Feature record: CXX_FEATURE:0cxx_override
    Feature record: CXX_FEATURE:0cxx_range_for
    Feature record: CXX_FEATURE:0cxx_raw_string_literals
    Feature record: CXX_FEATURE:0cxx_reference_qualified_functions
    Feature record: CXX_FEATURE:0cxx_relaxed_constexpr
    Feature record: CXX_FEATURE:0cxx_return_type_deduction
    Feature record: CXX_FEATURE:0cxx_right_angle_brackets
    Feature record: CXX_FEATURE:0cxx_rvalue_references
    Feature record: CXX_FEATURE:0cxx_sizeof_member
    Feature record: CXX_FEATURE:0cxx_static_assert
    Feature record: CXX_FEATURE:0cxx_strong_enums
    Feature record: CXX_FEATURE:1cxx_template_template_parameters
    Feature record: CXX_FEATURE:0cxx_thread_local
    Feature record: CXX_FEATURE:0cxx_trailing_return_types
    Feature record: CXX_FEATURE:0cxx_unicode_literals
    Feature record: CXX_FEATURE:0cxx_uniform_initialization
    Feature record: CXX_FEATURE:0cxx_unrestricted_unions
    Feature record: CXX_FEATURE:0cxx_user_literals
    Feature record: CXX_FEATURE:0cxx_variable_templates
    Feature record: CXX_FEATURE:0cxx_variadic_macros
    Feature record: CXX_FEATURE:0cxx_variadic_templates
Determining if the include file unistd.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_be574/fast"
/usr/bin/make -f CMakeFiles/cmTC_be574.dir/build.make CMakeFiles/cmTC_be574.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_be574.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_be574.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_be574
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_be574.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_be574.dir/CheckIncludeFile.cxx.o  -o cmTC_be574 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stdint.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_f7453/fast"
/usr/bin/make -f CMakeFiles/cmTC_f7453.dir/build.make CMakeFiles/cmTC_f7453.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_f7453.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_f7453.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_f7453
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_f7453.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_f7453.dir/CheckIncludeFile.cxx.o  -o cmTC_f7453 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file sys/types.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_b61ff/fast"
/usr/bin/make -f CMakeFiles/cmTC_b61ff.dir/build.make CMakeFiles/cmTC_b61ff.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_b61ff.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_b61ff.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_b61ff
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_b61ff.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_b61ff.dir/CheckIncludeFile.cxx.o  -o cmTC_b61ff -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file fnmatch.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_57208/fast"
/usr/bin/make -f CMakeFiles/cmTC_57208.dir/build.make CMakeFiles/cmTC_57208.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_57208.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_57208.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_57208
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_57208.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_57208.dir/CheckIncludeFile.cxx.o  -o cmTC_57208 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stddef.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_39641/fast"
/usr/bin/make -f CMakeFiles/cmTC_39641.dir/build.make CMakeFiles/cmTC_39641.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_39641.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_39641.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_39641
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_39641.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_39641.dir/CheckIncludeFile.cxx.o  -o cmTC_39641 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining size of uint32_t passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_acabf/fast"
/usr/bin/make -f CMakeFiles/cmTC_acabf.dir/build.make CMakeFiles/cmTC_acabf.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_acabf.dir/uint32_t.cpp.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_acabf.dir/uint32_t.cpp.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CheckTypeSize/uint32_t.cpp
Linking CXX executable cmTC_acabf
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_acabf.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_acabf.dir/uint32_t.cpp.o  -o cmTC_acabf -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the strtoll exist passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_3f1ee/fast"
/usr/bin/make -f CMakeFiles/cmTC_3f1ee.dir/build.make CMakeFiles/cmTC_3f1ee.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_3f1ee.dir/CheckSymbolExists.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_3f1ee.dir/CheckSymbolExists.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx
Linking CXX executable cmTC_3f1ee
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_3f1ee.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_3f1ee.dir/CheckSymbolExists.cxx.o  -o cmTC_3f1ee -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

File /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx:
/* */
#include <stdlib.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strtoll
  return ((int*)(&strtoll))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Performing C++ SOURCE FILE Test HAVE_CPUID_INFO succeeded with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_949fb/fast"
/usr/bin/make -f CMakeFiles/cmTC_949fb.dir/build.make CMakeFiles/cmTC_949fb.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_949fb.dir/src.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11   -o CMakeFiles/cmTC_949fb.dir/src.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/src.cxx
Linking CXX executable cmTC_949fb
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_949fb.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11    CMakeFiles/cmTC_949fb.dir/src.cxx.o  -o cmTC_949fb -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

Return value: 1
Source file was:

// InstructionSet.cpp
// Compile by using: cl /EHsc /W4 InstructionSet.cpp
// processor: x86, x64
// Uses the __cpuid intrinsic to get information about
// CPU extended instruction set support.
//
// source origin:
// https://msdn.microsoft.com/en-us/library/hskdteyh.aspx
// https://gcc.gnu.org/git/?p=gcc.git;a=blob_plain;f=gcc/config/i386/driver-i386.c


#include <iostream>
#include <fstream>
#include <vector>
#include <bitset>
#include <array>
#include <string>
#ifdef WIN32
#include <intrin.h>
#else
#include <cpuid.h>
#include <string.h>
#endif

class InstructionSet
{
    // forward declarations
    class InstructionSet_Internal;

public:
    // getters
    static std::string Vendor(void) { return CPU_Rep.vendor_; }
    static std::string Brand(void) { return CPU_Rep.brand_; }

    static bool SSE3(void) { return CPU_Rep.f_1_ECX_[0]; }
    static bool PCLMULQDQ(void) { return CPU_Rep.f_1_ECX_[1]; }
    static bool MONITOR(void) { return CPU_Rep.f_1_ECX_[3]; }
    static bool SSSE3(void) { return CPU_Rep.f_1_ECX_[9]; }
    static bool FMA(void) { return CPU_Rep.f_1_ECX_[12]; }
    static bool CMPXCHG16B(void) { return CPU_Rep.f_1_ECX_[13]; }
    static bool SSE41(void) { return CPU_Rep.f_1_ECX_[19]; }
    static bool SSE42(void) { return CPU_Rep.f_1_ECX_[20]; }
    static bool MOVBE(void) { return CPU_Rep.f_1_ECX_[22]; }
    static bool POPCNT(void) { return CPU_Rep.f_1_ECX_[23]; }
    static bool AES(void) { return CPU_Rep.f_1_ECX_[25]; }
    static bool XSAVE(void) { return CPU_Rep.f_1_ECX_[26]; }
    static bool OSXSAVE(void) { return CPU_Rep.f_1_ECX_[27]; }
    static bool AVX(void) { return CPU_Rep.f_1_ECX_[28]; }
    static bool F16C(void) { return CPU_Rep.f_1_ECX_[29]; }
    static bool RDRAND(void) { return CPU_Rep.f_1_ECX_[30]; }

    static bool MSR(void) { return CPU_Rep.f_1_EDX_[5]; }
    static bool CX8(void) { return CPU_Rep.f_1_EDX_[8]; }
    static bool SEP(void) { return CPU_Rep.f_1_EDX_[11]; }
    static bool CMOV(void) { return CPU_Rep.f_1_EDX_[15]; }
    static bool CLFSH(void) { return CPU_Rep.f_1_EDX_[19]; }
    static bool MMX(void) { return CPU_Rep.f_1_EDX_[23]; }
    static bool FXSR(void) { return CPU_Rep.f_1_EDX_[24]; }
    static bool SSE(void) { return CPU_Rep.f_1_EDX_[25]; }
    static bool SSE2(void) { return CPU_Rep.f_1_EDX_[26]; }

    static bool FSGSBASE(void) { return CPU_Rep.f_7_EBX_[0]; }
    static bool BMI1(void) { return CPU_Rep.f_7_EBX_[3]; }
    static bool HLE(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[4]; }
    static bool AVX2(void) { return CPU_Rep.f_7_EBX_[5]; }
    static bool BMI2(void) { return CPU_Rep.f_7_EBX_[8]; }
    static bool ERMS(void) { return CPU_Rep.f_7_EBX_[9]; }
    static bool INVPCID(void) { return CPU_Rep.f_7_EBX_[10]; }
    static bool RTM(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[11]; }
    static bool AVX512F(void) { return CPU_Rep.f_7_EBX_[16]; }
    static bool RDSEED(void) { return CPU_Rep.f_7_EBX_[18]; }
    static bool ADX(void) { return CPU_Rep.f_7_EBX_[19]; }
    static bool AVX512PF(void) { return CPU_Rep.f_7_EBX_[26]; }
    static bool AVX512ER(void) { return CPU_Rep.f_7_EBX_[27]; }
    static bool AVX512CD(void) { return CPU_Rep.f_7_EBX_[28]; }
    static bool SHA(void) { return CPU_Rep.f_7_EBX_[29]; }

    static bool PREFETCHWT1(void) { return CPU_Rep.f_7_ECX_[0]; }

    static bool LAHF(void) { return CPU_Rep.f_81_ECX_[0]; }
    static bool LZCNT(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_ECX_[5]; }
    static bool ABM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[5]; }
    static bool SSE4a(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[6]; }
    static bool XOP(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[11]; }
    static bool TBM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[21]; }

    static bool SYSCALL(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[11]; }
    static bool MMXEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[22]; }
    static bool RDTSCP(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[27]; }
    static bool _3DNOWEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[30]; }
    static bool _3DNOW(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[31]; }

private:
    static const InstructionSet_Internal CPU_Rep;

    class InstructionSet_Internal
    {
    public:
        InstructionSet_Internal()
            : nIds_{ 0 },
            nExIds_{ 0 },
            isIntel_{ false },
            isAMD_{ false },
            f_1_ECX_{ 0 },
            f_1_EDX_{ 0 },
            f_7_EBX_{ 0 },
            f_7_ECX_{ 0 },
            f_81_ECX_{ 0 },
            f_81_EDX_{ 0 },
            data_{},
            extdata_{}
        {
#ifdef WIN32
            std::array<int, 4> cpui;
#else
            std::array<unsigned int, 4> cpui;
#endif

            // Calling __cpuid with 0x0 as the function_id argument
            // gets the number of the highest valid function ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0);
#else
            cpui[0] = __get_cpuid_max(0, &cpui[1]);
#endif
            nIds_ = cpui[0];

            for (int i = 0; i <= nIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif

                data_.push_back(cpui);
            }

            // Capture vendor string
            char vendor[0x20];
            memset(vendor, 0, sizeof(vendor));
            *reinterpret_cast<int*>(vendor + 0) = data_[0][1];
            *reinterpret_cast<int*>(vendor + 4) = data_[0][3];
            *reinterpret_cast<int*>(vendor + 8) = data_[0][2];
            vendor_ = vendor;
            if (vendor_ == "GenuineIntel")
            {
                isIntel_ = true;
            }
            else if (vendor_ == "AuthenticAMD")
            {
                isAMD_ = true;
            }

            // load bitset with flags for function 0x00000001
            if (nIds_ >= 1)
            {
                f_1_ECX_ = data_[1][2];
                f_1_EDX_ = data_[1][3];
            }

            // load bitset with flags for function 0x00000007
            if (nIds_ >= 7)
            {
                f_7_EBX_ = data_[7][1];
                f_7_ECX_ = data_[7][2];
            }

            // Calling __cpuid with 0x80000000 as the function_id argument
            // gets the number of the highest valid extended ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0x80000000);
#else
            __cpuid(0x80000000, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
            nExIds_ = cpui[0];

            char brand[0x40];
            memset(brand, 0, sizeof(brand));

            for (int i = 0x80000000; i <= nExIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
                extdata_.push_back(cpui);
            }

            // load bitset with flags for function 0x80000001
            if ((unsigned)nExIds_ >= 0x80000001)
            {
                f_81_ECX_ = extdata_[1][2];
                f_81_EDX_ = extdata_[1][3];
            }

            // Interpret CPU brand string if reported
            if ((unsigned)nExIds_ >= 0x80000004)
            {
                memcpy(brand +  0, extdata_[2].data(), sizeof(cpui));
                memcpy(brand + 16, extdata_[3].data(), sizeof(cpui));
                memcpy(brand + 32, extdata_[4].data(), sizeof(cpui));
                brand_ = brand;
            }
        };

        int nIds_;
        int nExIds_;
        std::string vendor_;
        std::string brand_;
        bool isIntel_;
        bool isAMD_;
        std::bitset<32> f_1_ECX_;
        std::bitset<32> f_1_EDX_;
        std::bitset<32> f_7_EBX_;
        std::bitset<32> f_7_ECX_;
        std::bitset<32> f_81_ECX_;
        std::bitset<32> f_81_EDX_;
#ifdef WIN32
        std::vector<std::array<int, 4>> data_;
        std::vector<std::array<int, 4>> extdata_;
#else
        std::vector<std::array<unsigned int, 4>> data_;
        std::vector<std::array<unsigned int, 4>> extdata_;
#endif
    };
};

// Initialize static member data
const InstructionSet::InstructionSet_Internal InstructionSet::CPU_Rep;

// Print out supported instruction set extensions
int main()
{
    std::ofstream fo("/opt/sample_release/inference_engine_samples_build/cpuid.txt");
    auto& outstream = fo;//std::cout;

    auto support_message = [&outstream](std::string isa_feature, bool is_supported) {
        outstream << isa_feature << (is_supported ? " supported" : " not supported") << std::endl;
    };

    std::cout << InstructionSet::Vendor() << std::endl;
    std::cout << InstructionSet::Brand() << std::endl;

    support_message("3DNOW",       InstructionSet::_3DNOW());
    support_message("3DNOWEXT",    InstructionSet::_3DNOWEXT());
    support_message("ABM",         InstructionSet::ABM());
    support_message("ADX",         InstructionSet::ADX());
    support_message("AES",         InstructionSet::AES());
    support_message("AVX",         InstructionSet::AVX());
    support_message("AVX2",        InstructionSet::AVX2());
    support_message("AVX512CD",    InstructionSet::AVX512CD());
    support_message("AVX512F",     InstructionSet::AVX512F());
    support_message("AVX512ER",    InstructionSet::AVX512ER());
    support_message("AVX512PF",    InstructionSet::AVX512PF());
    support_message("BMI1",        InstructionSet::BMI1());
    support_message("BMI2",        InstructionSet::BMI2());
    support_message("CLFSH",       InstructionSet::CLFSH());
    support_message("CMPXCHG16B",  InstructionSet::CMPXCHG16B());
    support_message("CX8",         InstructionSet::CX8());
    support_message("ERMS",        InstructionSet::ERMS());
    support_message("F16C",        InstructionSet::F16C());
    support_message("FMA",         InstructionSet::FMA());
    support_message("FSGSBASE",    InstructionSet::FSGSBASE());
    support_message("FXSR",        InstructionSet::FXSR());
    support_message("HLE",         InstructionSet::HLE());
    support_message("INVPCID",     InstructionSet::INVPCID());
    support_message("LAHF",        InstructionSet::LAHF());
    support_message("LZCNT",       InstructionSet::LZCNT());
    support_message("MMX",         InstructionSet::MMX());
    support_message("MMXEXT",      InstructionSet::MMXEXT());
    support_message("MONITOR",     InstructionSet::MONITOR());
    support_message("MOVBE",       InstructionSet::MOVBE());
    support_message("MSR",         InstructionSet::MSR());
    support_message("OSXSAVE",     InstructionSet::OSXSAVE());
    support_message("PCLMULQDQ",   InstructionSet::PCLMULQDQ());
    support_message("POPCNT",      InstructionSet::POPCNT());
    support_message("PREFETCHWT1", InstructionSet::PREFETCHWT1());
    support_message("RDRAND",      InstructionSet::RDRAND());
    support_message("RDSEED",      InstructionSet::RDSEED());
    support_message("RDTSCP",      InstructionSet::RDTSCP());
    support_message("RTM",         InstructionSet::RTM());
    support_message("SEP",         InstructionSet::SEP());
    support_message("SHA",         InstructionSet::SHA());
    support_message("SSE",         InstructionSet::SSE());
    support_message("SSE2",        InstructionSet::SSE2());
    support_message("SSE3",        InstructionSet::SSE3());
    support_message("SSE4.1",      InstructionSet::SSE41());
    support_message("SSE4.2",      InstructionSet::SSE42());
    support_message("SSE4a",       InstructionSet::SSE4a());
    support_message("SSSE3",       InstructionSet::SSSE3());
    support_message("SYSCALL",     InstructionSet::SYSCALL());
    support_message("TBM",         InstructionSet::TBM());
    support_message("XOP",         InstructionSet::XOP());
    support_message("XSAVE",       InstructionSet::XSAVE());
    return 0;
}

Determining if the include file pthread.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_8023d/fast"
/usr/bin/make -f CMakeFiles/cmTC_8023d.dir/build.make CMakeFiles/cmTC_8023d.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_8023d.dir/CheckIncludeFile.c.o
/usr/bin/cc    -std=c++11   -o CMakeFiles/cmTC_8023d.dir/CheckIncludeFile.c.o   -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_8023d
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_8023d.dir/link.txt --verbose=1
/usr/bin/cc   -std=c++11    CMakeFiles/cmTC_8023d.dir/CheckIncludeFile.c.o  -o cmTC_8023d -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the function pthread_create exists in the pthread passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_fa1fe/fast"
/usr/bin/make -f CMakeFiles/cmTC_fa1fe.dir/build.make CMakeFiles/cmTC_fa1fe.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_fa1fe.dir/CheckFunctionExists.c.o
/usr/bin/cc    -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11   -o CMakeFiles/cmTC_fa1fe.dir/CheckFunctionExists.c.o   -c /usr/share/cmake-3.5/Modules/CheckFunctionExists.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_fa1fe
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_fa1fe.dir/link.txt --verbose=1
/usr/bin/cc   -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11    CMakeFiles/cmTC_fa1fe.dir/CheckFunctionExists.c.o  -o cmTC_fa1fe -rdynamic -lpthread 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file unistd.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_21ad6/fast"
/usr/bin/make -f CMakeFiles/cmTC_21ad6.dir/build.make CMakeFiles/cmTC_21ad6.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_21ad6.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_21ad6.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_21ad6
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_21ad6.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_21ad6.dir/CheckIncludeFile.cxx.o  -o cmTC_21ad6 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stdint.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_481c9/fast"
/usr/bin/make -f CMakeFiles/cmTC_481c9.dir/build.make CMakeFiles/cmTC_481c9.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_481c9.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_481c9.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_481c9
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_481c9.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_481c9.dir/CheckIncludeFile.cxx.o  -o cmTC_481c9 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file sys/types.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_ae683/fast"
/usr/bin/make -f CMakeFiles/cmTC_ae683.dir/build.make CMakeFiles/cmTC_ae683.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_ae683.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_ae683.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_ae683
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_ae683.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_ae683.dir/CheckIncludeFile.cxx.o  -o cmTC_ae683 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file fnmatch.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_4bdf0/fast"
/usr/bin/make -f CMakeFiles/cmTC_4bdf0.dir/build.make CMakeFiles/cmTC_4bdf0.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_4bdf0.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_4bdf0.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_4bdf0
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_4bdf0.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_4bdf0.dir/CheckIncludeFile.cxx.o  -o cmTC_4bdf0 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stddef.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_387b8/fast"
/usr/bin/make -f CMakeFiles/cmTC_387b8.dir/build.make CMakeFiles/cmTC_387b8.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_387b8.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_387b8.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_387b8
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_387b8.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_387b8.dir/CheckIncludeFile.cxx.o  -o cmTC_387b8 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining size of uint32_t passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_9221b/fast"
/usr/bin/make -f CMakeFiles/cmTC_9221b.dir/build.make CMakeFiles/cmTC_9221b.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_9221b.dir/uint32_t.cpp.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_9221b.dir/uint32_t.cpp.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CheckTypeSize/uint32_t.cpp
Linking CXX executable cmTC_9221b
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_9221b.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_9221b.dir/uint32_t.cpp.o  -o cmTC_9221b -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the strtoll exist passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_42eda/fast"
/usr/bin/make -f CMakeFiles/cmTC_42eda.dir/build.make CMakeFiles/cmTC_42eda.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_42eda.dir/CheckSymbolExists.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_42eda.dir/CheckSymbolExists.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx
Linking CXX executable cmTC_42eda
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_42eda.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_42eda.dir/CheckSymbolExists.cxx.o  -o cmTC_42eda -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

File /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx:
/* */
#include <stdlib.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strtoll
  return ((int*)(&strtoll))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Performing C++ SOURCE FILE Test HAVE_CPUID_INFO succeeded with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_480f1/fast"
/usr/bin/make -f CMakeFiles/cmTC_480f1.dir/build.make CMakeFiles/cmTC_480f1.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_480f1.dir/src.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11   -o CMakeFiles/cmTC_480f1.dir/src.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/src.cxx
Linking CXX executable cmTC_480f1
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_480f1.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11    CMakeFiles/cmTC_480f1.dir/src.cxx.o  -o cmTC_480f1 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

Return value: 1
Source file was:

// InstructionSet.cpp
// Compile by using: cl /EHsc /W4 InstructionSet.cpp
// processor: x86, x64
// Uses the __cpuid intrinsic to get information about
// CPU extended instruction set support.
//
// source origin:
// https://msdn.microsoft.com/en-us/library/hskdteyh.aspx
// https://gcc.gnu.org/git/?p=gcc.git;a=blob_plain;f=gcc/config/i386/driver-i386.c


#include <iostream>
#include <fstream>
#include <vector>
#include <bitset>
#include <array>
#include <string>
#ifdef WIN32
#include <intrin.h>
#else
#include <cpuid.h>
#include <string.h>
#endif

class InstructionSet
{
    // forward declarations
    class InstructionSet_Internal;

public:
    // getters
    static std::string Vendor(void) { return CPU_Rep.vendor_; }
    static std::string Brand(void) { return CPU_Rep.brand_; }

    static bool SSE3(void) { return CPU_Rep.f_1_ECX_[0]; }
    static bool PCLMULQDQ(void) { return CPU_Rep.f_1_ECX_[1]; }
    static bool MONITOR(void) { return CPU_Rep.f_1_ECX_[3]; }
    static bool SSSE3(void) { return CPU_Rep.f_1_ECX_[9]; }
    static bool FMA(void) { return CPU_Rep.f_1_ECX_[12]; }
    static bool CMPXCHG16B(void) { return CPU_Rep.f_1_ECX_[13]; }
    static bool SSE41(void) { return CPU_Rep.f_1_ECX_[19]; }
    static bool SSE42(void) { return CPU_Rep.f_1_ECX_[20]; }
    static bool MOVBE(void) { return CPU_Rep.f_1_ECX_[22]; }
    static bool POPCNT(void) { return CPU_Rep.f_1_ECX_[23]; }
    static bool AES(void) { return CPU_Rep.f_1_ECX_[25]; }
    static bool XSAVE(void) { return CPU_Rep.f_1_ECX_[26]; }
    static bool OSXSAVE(void) { return CPU_Rep.f_1_ECX_[27]; }
    static bool AVX(void) { return CPU_Rep.f_1_ECX_[28]; }
    static bool F16C(void) { return CPU_Rep.f_1_ECX_[29]; }
    static bool RDRAND(void) { return CPU_Rep.f_1_ECX_[30]; }

    static bool MSR(void) { return CPU_Rep.f_1_EDX_[5]; }
    static bool CX8(void) { return CPU_Rep.f_1_EDX_[8]; }
    static bool SEP(void) { return CPU_Rep.f_1_EDX_[11]; }
    static bool CMOV(void) { return CPU_Rep.f_1_EDX_[15]; }
    static bool CLFSH(void) { return CPU_Rep.f_1_EDX_[19]; }
    static bool MMX(void) { return CPU_Rep.f_1_EDX_[23]; }
    static bool FXSR(void) { return CPU_Rep.f_1_EDX_[24]; }
    static bool SSE(void) { return CPU_Rep.f_1_EDX_[25]; }
    static bool SSE2(void) { return CPU_Rep.f_1_EDX_[26]; }

    static bool FSGSBASE(void) { return CPU_Rep.f_7_EBX_[0]; }
    static bool BMI1(void) { return CPU_Rep.f_7_EBX_[3]; }
    static bool HLE(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[4]; }
    static bool AVX2(void) { return CPU_Rep.f_7_EBX_[5]; }
    static bool BMI2(void) { return CPU_Rep.f_7_EBX_[8]; }
    static bool ERMS(void) { return CPU_Rep.f_7_EBX_[9]; }
    static bool INVPCID(void) { return CPU_Rep.f_7_EBX_[10]; }
    static bool RTM(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[11]; }
    static bool AVX512F(void) { return CPU_Rep.f_7_EBX_[16]; }
    static bool RDSEED(void) { return CPU_Rep.f_7_EBX_[18]; }
    static bool ADX(void) { return CPU_Rep.f_7_EBX_[19]; }
    static bool AVX512PF(void) { return CPU_Rep.f_7_EBX_[26]; }
    static bool AVX512ER(void) { return CPU_Rep.f_7_EBX_[27]; }
    static bool AVX512CD(void) { return CPU_Rep.f_7_EBX_[28]; }
    static bool SHA(void) { return CPU_Rep.f_7_EBX_[29]; }

    static bool PREFETCHWT1(void) { return CPU_Rep.f_7_ECX_[0]; }

    static bool LAHF(void) { return CPU_Rep.f_81_ECX_[0]; }
    static bool LZCNT(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_ECX_[5]; }
    static bool ABM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[5]; }
    static bool SSE4a(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[6]; }
    static bool XOP(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[11]; }
    static bool TBM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[21]; }

    static bool SYSCALL(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[11]; }
    static bool MMXEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[22]; }
    static bool RDTSCP(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[27]; }
    static bool _3DNOWEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[30]; }
    static bool _3DNOW(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[31]; }

private:
    static const InstructionSet_Internal CPU_Rep;

    class InstructionSet_Internal
    {
    public:
        InstructionSet_Internal()
            : nIds_{ 0 },
            nExIds_{ 0 },
            isIntel_{ false },
            isAMD_{ false },
            f_1_ECX_{ 0 },
            f_1_EDX_{ 0 },
            f_7_EBX_{ 0 },
            f_7_ECX_{ 0 },
            f_81_ECX_{ 0 },
            f_81_EDX_{ 0 },
            data_{},
            extdata_{}
        {
#ifdef WIN32
            std::array<int, 4> cpui;
#else
            std::array<unsigned int, 4> cpui;
#endif

            // Calling __cpuid with 0x0 as the function_id argument
            // gets the number of the highest valid function ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0);
#else
            cpui[0] = __get_cpuid_max(0, &cpui[1]);
#endif
            nIds_ = cpui[0];

            for (int i = 0; i <= nIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif

                data_.push_back(cpui);
            }

            // Capture vendor string
            char vendor[0x20];
            memset(vendor, 0, sizeof(vendor));
            *reinterpret_cast<int*>(vendor + 0) = data_[0][1];
            *reinterpret_cast<int*>(vendor + 4) = data_[0][3];
            *reinterpret_cast<int*>(vendor + 8) = data_[0][2];
            vendor_ = vendor;
            if (vendor_ == "GenuineIntel")
            {
                isIntel_ = true;
            }
            else if (vendor_ == "AuthenticAMD")
            {
                isAMD_ = true;
            }

            // load bitset with flags for function 0x00000001
            if (nIds_ >= 1)
            {
                f_1_ECX_ = data_[1][2];
                f_1_EDX_ = data_[1][3];
            }

            // load bitset with flags for function 0x00000007
            if (nIds_ >= 7)
            {
                f_7_EBX_ = data_[7][1];
                f_7_ECX_ = data_[7][2];
            }

            // Calling __cpuid with 0x80000000 as the function_id argument
            // gets the number of the highest valid extended ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0x80000000);
#else
            __cpuid(0x80000000, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
            nExIds_ = cpui[0];

            char brand[0x40];
            memset(brand, 0, sizeof(brand));

            for (int i = 0x80000000; i <= nExIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
                extdata_.push_back(cpui);
            }

            // load bitset with flags for function 0x80000001
            if ((unsigned)nExIds_ >= 0x80000001)
            {
                f_81_ECX_ = extdata_[1][2];
                f_81_EDX_ = extdata_[1][3];
            }

            // Interpret CPU brand string if reported
            if ((unsigned)nExIds_ >= 0x80000004)
            {
                memcpy(brand +  0, extdata_[2].data(), sizeof(cpui));
                memcpy(brand + 16, extdata_[3].data(), sizeof(cpui));
                memcpy(brand + 32, extdata_[4].data(), sizeof(cpui));
                brand_ = brand;
            }
        };

        int nIds_;
        int nExIds_;
        std::string vendor_;
        std::string brand_;
        bool isIntel_;
        bool isAMD_;
        std::bitset<32> f_1_ECX_;
        std::bitset<32> f_1_EDX_;
        std::bitset<32> f_7_EBX_;
        std::bitset<32> f_7_ECX_;
        std::bitset<32> f_81_ECX_;
        std::bitset<32> f_81_EDX_;
#ifdef WIN32
        std::vector<std::array<int, 4>> data_;
        std::vector<std::array<int, 4>> extdata_;
#else
        std::vector<std::array<unsigned int, 4>> data_;
        std::vector<std::array<unsigned int, 4>> extdata_;
#endif
    };
};

// Initialize static member data
const InstructionSet::InstructionSet_Internal InstructionSet::CPU_Rep;

// Print out supported instruction set extensions
int main()
{
    std::ofstream fo("/opt/sample_release/inference_engine_samples_build/cpuid.txt");
    auto& outstream = fo;//std::cout;

    auto support_message = [&outstream](std::string isa_feature, bool is_supported) {
        outstream << isa_feature << (is_supported ? " supported" : " not supported") << std::endl;
    };

    std::cout << InstructionSet::Vendor() << std::endl;
    std::cout << InstructionSet::Brand() << std::endl;

    support_message("3DNOW",       InstructionSet::_3DNOW());
    support_message("3DNOWEXT",    InstructionSet::_3DNOWEXT());
    support_message("ABM",         InstructionSet::ABM());
    support_message("ADX",         InstructionSet::ADX());
    support_message("AES",         InstructionSet::AES());
    support_message("AVX",         InstructionSet::AVX());
    support_message("AVX2",        InstructionSet::AVX2());
    support_message("AVX512CD",    InstructionSet::AVX512CD());
    support_message("AVX512F",     InstructionSet::AVX512F());
    support_message("AVX512ER",    InstructionSet::AVX512ER());
    support_message("AVX512PF",    InstructionSet::AVX512PF());
    support_message("BMI1",        InstructionSet::BMI1());
    support_message("BMI2",        InstructionSet::BMI2());
    support_message("CLFSH",       InstructionSet::CLFSH());
    support_message("CMPXCHG16B",  InstructionSet::CMPXCHG16B());
    support_message("CX8",         InstructionSet::CX8());
    support_message("ERMS",        InstructionSet::ERMS());
    support_message("F16C",        InstructionSet::F16C());
    support_message("FMA",         InstructionSet::FMA());
    support_message("FSGSBASE",    InstructionSet::FSGSBASE());
    support_message("FXSR",        InstructionSet::FXSR());
    support_message("HLE",         InstructionSet::HLE());
    support_message("INVPCID",     InstructionSet::INVPCID());
    support_message("LAHF",        InstructionSet::LAHF());
    support_message("LZCNT",       InstructionSet::LZCNT());
    support_message("MMX",         InstructionSet::MMX());
    support_message("MMXEXT",      InstructionSet::MMXEXT());
    support_message("MONITOR",     InstructionSet::MONITOR());
    support_message("MOVBE",       InstructionSet::MOVBE());
    support_message("MSR",         InstructionSet::MSR());
    support_message("OSXSAVE",     InstructionSet::OSXSAVE());
    support_message("PCLMULQDQ",   InstructionSet::PCLMULQDQ());
    support_message("POPCNT",      InstructionSet::POPCNT());
    support_message("PREFETCHWT1", InstructionSet::PREFETCHWT1());
    support_message("RDRAND",      InstructionSet::RDRAND());
    support_message("RDSEED",      InstructionSet::RDSEED());
    support_message("RDTSCP",      InstructionSet::RDTSCP());
    support_message("RTM",         InstructionSet::RTM());
    support_message("SEP",         InstructionSet::SEP());
    support_message("SHA",         InstructionSet::SHA());
    support_message("SSE",         InstructionSet::SSE());
    support_message("SSE2",        InstructionSet::SSE2());
    support_message("SSE3",        InstructionSet::SSE3());
    support_message("SSE4.1",      InstructionSet::SSE41());
    support_message("SSE4.2",      InstructionSet::SSE42());
    support_message("SSE4a",       InstructionSet::SSE4a());
    support_message("SSSE3",       InstructionSet::SSSE3());
    support_message("SYSCALL",     InstructionSet::SYSCALL());
    support_message("TBM",         InstructionSet::TBM());
    support_message("XOP",         InstructionSet::XOP());
    support_message("XSAVE",       InstructionSet::XSAVE());
    return 0;
}

Determining if the include file pthread.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_1af64/fast"
/usr/bin/make -f CMakeFiles/cmTC_1af64.dir/build.make CMakeFiles/cmTC_1af64.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_1af64.dir/CheckIncludeFile.c.o
/usr/bin/cc    -std=c++11   -o CMakeFiles/cmTC_1af64.dir/CheckIncludeFile.c.o   -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_1af64
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_1af64.dir/link.txt --verbose=1
/usr/bin/cc   -std=c++11    CMakeFiles/cmTC_1af64.dir/CheckIncludeFile.c.o  -o cmTC_1af64 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the function pthread_create exists in the pthread passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_04a71/fast"
/usr/bin/make -f CMakeFiles/cmTC_04a71.dir/build.make CMakeFiles/cmTC_04a71.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_04a71.dir/CheckFunctionExists.c.o
/usr/bin/cc    -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11   -o CMakeFiles/cmTC_04a71.dir/CheckFunctionExists.c.o   -c /usr/share/cmake-3.5/Modules/CheckFunctionExists.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_04a71
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_04a71.dir/link.txt --verbose=1
/usr/bin/cc   -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11    CMakeFiles/cmTC_04a71.dir/CheckFunctionExists.c.o  -o cmTC_04a71 -rdynamic -lpthread 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file unistd.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_dbe52/fast"
/usr/bin/make -f CMakeFiles/cmTC_dbe52.dir/build.make CMakeFiles/cmTC_dbe52.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_dbe52.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_dbe52.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_dbe52
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_dbe52.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_dbe52.dir/CheckIncludeFile.cxx.o  -o cmTC_dbe52 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stdint.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_a55c2/fast"
/usr/bin/make -f CMakeFiles/cmTC_a55c2.dir/build.make CMakeFiles/cmTC_a55c2.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_a55c2.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_a55c2.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_a55c2
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_a55c2.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_a55c2.dir/CheckIncludeFile.cxx.o  -o cmTC_a55c2 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file sys/types.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_506be/fast"
/usr/bin/make -f CMakeFiles/cmTC_506be.dir/build.make CMakeFiles/cmTC_506be.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_506be.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_506be.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_506be
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_506be.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_506be.dir/CheckIncludeFile.cxx.o  -o cmTC_506be -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file fnmatch.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_0ccb2/fast"
/usr/bin/make -f CMakeFiles/cmTC_0ccb2.dir/build.make CMakeFiles/cmTC_0ccb2.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_0ccb2.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_0ccb2.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_0ccb2
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_0ccb2.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_0ccb2.dir/CheckIncludeFile.cxx.o  -o cmTC_0ccb2 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stddef.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_710ed/fast"
/usr/bin/make -f CMakeFiles/cmTC_710ed.dir/build.make CMakeFiles/cmTC_710ed.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_710ed.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_710ed.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_710ed
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_710ed.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_710ed.dir/CheckIncludeFile.cxx.o  -o cmTC_710ed -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining size of uint32_t passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_278b9/fast"
/usr/bin/make -f CMakeFiles/cmTC_278b9.dir/build.make CMakeFiles/cmTC_278b9.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_278b9.dir/uint32_t.cpp.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_278b9.dir/uint32_t.cpp.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CheckTypeSize/uint32_t.cpp
Linking CXX executable cmTC_278b9
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_278b9.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_278b9.dir/uint32_t.cpp.o  -o cmTC_278b9 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the strtoll exist passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_a196c/fast"
/usr/bin/make -f CMakeFiles/cmTC_a196c.dir/build.make CMakeFiles/cmTC_a196c.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_a196c.dir/CheckSymbolExists.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_a196c.dir/CheckSymbolExists.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx
Linking CXX executable cmTC_a196c
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_a196c.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_a196c.dir/CheckSymbolExists.cxx.o  -o cmTC_a196c -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

File /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx:
/* */
#include <stdlib.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strtoll
  return ((int*)(&strtoll))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Performing C++ SOURCE FILE Test HAVE_CPUID_INFO succeeded with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_41558/fast"
/usr/bin/make -f CMakeFiles/cmTC_41558.dir/build.make CMakeFiles/cmTC_41558.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_41558.dir/src.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11   -o CMakeFiles/cmTC_41558.dir/src.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/src.cxx
Linking CXX executable cmTC_41558
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_41558.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11    CMakeFiles/cmTC_41558.dir/src.cxx.o  -o cmTC_41558 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

Return value: 1
Source file was:

// InstructionSet.cpp
// Compile by using: cl /EHsc /W4 InstructionSet.cpp
// processor: x86, x64
// Uses the __cpuid intrinsic to get information about
// CPU extended instruction set support.
//
// source origin:
// https://msdn.microsoft.com/en-us/library/hskdteyh.aspx
// https://gcc.gnu.org/git/?p=gcc.git;a=blob_plain;f=gcc/config/i386/driver-i386.c


#include <iostream>
#include <fstream>
#include <vector>
#include <bitset>
#include <array>
#include <string>
#ifdef WIN32
#include <intrin.h>
#else
#include <cpuid.h>
#include <string.h>
#endif

class InstructionSet
{
    // forward declarations
    class InstructionSet_Internal;

public:
    // getters
    static std::string Vendor(void) { return CPU_Rep.vendor_; }
    static std::string Brand(void) { return CPU_Rep.brand_; }

    static bool SSE3(void) { return CPU_Rep.f_1_ECX_[0]; }
    static bool PCLMULQDQ(void) { return CPU_Rep.f_1_ECX_[1]; }
    static bool MONITOR(void) { return CPU_Rep.f_1_ECX_[3]; }
    static bool SSSE3(void) { return CPU_Rep.f_1_ECX_[9]; }
    static bool FMA(void) { return CPU_Rep.f_1_ECX_[12]; }
    static bool CMPXCHG16B(void) { return CPU_Rep.f_1_ECX_[13]; }
    static bool SSE41(void) { return CPU_Rep.f_1_ECX_[19]; }
    static bool SSE42(void) { return CPU_Rep.f_1_ECX_[20]; }
    static bool MOVBE(void) { return CPU_Rep.f_1_ECX_[22]; }
    static bool POPCNT(void) { return CPU_Rep.f_1_ECX_[23]; }
    static bool AES(void) { return CPU_Rep.f_1_ECX_[25]; }
    static bool XSAVE(void) { return CPU_Rep.f_1_ECX_[26]; }
    static bool OSXSAVE(void) { return CPU_Rep.f_1_ECX_[27]; }
    static bool AVX(void) { return CPU_Rep.f_1_ECX_[28]; }
    static bool F16C(void) { return CPU_Rep.f_1_ECX_[29]; }
    static bool RDRAND(void) { return CPU_Rep.f_1_ECX_[30]; }

    static bool MSR(void) { return CPU_Rep.f_1_EDX_[5]; }
    static bool CX8(void) { return CPU_Rep.f_1_EDX_[8]; }
    static bool SEP(void) { return CPU_Rep.f_1_EDX_[11]; }
    static bool CMOV(void) { return CPU_Rep.f_1_EDX_[15]; }
    static bool CLFSH(void) { return CPU_Rep.f_1_EDX_[19]; }
    static bool MMX(void) { return CPU_Rep.f_1_EDX_[23]; }
    static bool FXSR(void) { return CPU_Rep.f_1_EDX_[24]; }
    static bool SSE(void) { return CPU_Rep.f_1_EDX_[25]; }
    static bool SSE2(void) { return CPU_Rep.f_1_EDX_[26]; }

    static bool FSGSBASE(void) { return CPU_Rep.f_7_EBX_[0]; }
    static bool BMI1(void) { return CPU_Rep.f_7_EBX_[3]; }
    static bool HLE(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[4]; }
    static bool AVX2(void) { return CPU_Rep.f_7_EBX_[5]; }
    static bool BMI2(void) { return CPU_Rep.f_7_EBX_[8]; }
    static bool ERMS(void) { return CPU_Rep.f_7_EBX_[9]; }
    static bool INVPCID(void) { return CPU_Rep.f_7_EBX_[10]; }
    static bool RTM(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[11]; }
    static bool AVX512F(void) { return CPU_Rep.f_7_EBX_[16]; }
    static bool RDSEED(void) { return CPU_Rep.f_7_EBX_[18]; }
    static bool ADX(void) { return CPU_Rep.f_7_EBX_[19]; }
    static bool AVX512PF(void) { return CPU_Rep.f_7_EBX_[26]; }
    static bool AVX512ER(void) { return CPU_Rep.f_7_EBX_[27]; }
    static bool AVX512CD(void) { return CPU_Rep.f_7_EBX_[28]; }
    static bool SHA(void) { return CPU_Rep.f_7_EBX_[29]; }

    static bool PREFETCHWT1(void) { return CPU_Rep.f_7_ECX_[0]; }

    static bool LAHF(void) { return CPU_Rep.f_81_ECX_[0]; }
    static bool LZCNT(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_ECX_[5]; }
    static bool ABM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[5]; }
    static bool SSE4a(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[6]; }
    static bool XOP(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[11]; }
    static bool TBM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[21]; }

    static bool SYSCALL(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[11]; }
    static bool MMXEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[22]; }
    static bool RDTSCP(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[27]; }
    static bool _3DNOWEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[30]; }
    static bool _3DNOW(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[31]; }

private:
    static const InstructionSet_Internal CPU_Rep;

    class InstructionSet_Internal
    {
    public:
        InstructionSet_Internal()
            : nIds_{ 0 },
            nExIds_{ 0 },
            isIntel_{ false },
            isAMD_{ false },
            f_1_ECX_{ 0 },
            f_1_EDX_{ 0 },
            f_7_EBX_{ 0 },
            f_7_ECX_{ 0 },
            f_81_ECX_{ 0 },
            f_81_EDX_{ 0 },
            data_{},
            extdata_{}
        {
#ifdef WIN32
            std::array<int, 4> cpui;
#else
            std::array<unsigned int, 4> cpui;
#endif

            // Calling __cpuid with 0x0 as the function_id argument
            // gets the number of the highest valid function ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0);
#else
            cpui[0] = __get_cpuid_max(0, &cpui[1]);
#endif
            nIds_ = cpui[0];

            for (int i = 0; i <= nIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif

                data_.push_back(cpui);
            }

            // Capture vendor string
            char vendor[0x20];
            memset(vendor, 0, sizeof(vendor));
            *reinterpret_cast<int*>(vendor + 0) = data_[0][1];
            *reinterpret_cast<int*>(vendor + 4) = data_[0][3];
            *reinterpret_cast<int*>(vendor + 8) = data_[0][2];
            vendor_ = vendor;
            if (vendor_ == "GenuineIntel")
            {
                isIntel_ = true;
            }
            else if (vendor_ == "AuthenticAMD")
            {
                isAMD_ = true;
            }

            // load bitset with flags for function 0x00000001
            if (nIds_ >= 1)
            {
                f_1_ECX_ = data_[1][2];
                f_1_EDX_ = data_[1][3];
            }

            // load bitset with flags for function 0x00000007
            if (nIds_ >= 7)
            {
                f_7_EBX_ = data_[7][1];
                f_7_ECX_ = data_[7][2];
            }

            // Calling __cpuid with 0x80000000 as the function_id argument
            // gets the number of the highest valid extended ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0x80000000);
#else
            __cpuid(0x80000000, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
            nExIds_ = cpui[0];

            char brand[0x40];
            memset(brand, 0, sizeof(brand));

            for (int i = 0x80000000; i <= nExIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
                extdata_.push_back(cpui);
            }

            // load bitset with flags for function 0x80000001
            if ((unsigned)nExIds_ >= 0x80000001)
            {
                f_81_ECX_ = extdata_[1][2];
                f_81_EDX_ = extdata_[1][3];
            }

            // Interpret CPU brand string if reported
            if ((unsigned)nExIds_ >= 0x80000004)
            {
                memcpy(brand +  0, extdata_[2].data(), sizeof(cpui));
                memcpy(brand + 16, extdata_[3].data(), sizeof(cpui));
                memcpy(brand + 32, extdata_[4].data(), sizeof(cpui));
                brand_ = brand;
            }
        };

        int nIds_;
        int nExIds_;
        std::string vendor_;
        std::string brand_;
        bool isIntel_;
        bool isAMD_;
        std::bitset<32> f_1_ECX_;
        std::bitset<32> f_1_EDX_;
        std::bitset<32> f_7_EBX_;
        std::bitset<32> f_7_ECX_;
        std::bitset<32> f_81_ECX_;
        std::bitset<32> f_81_EDX_;
#ifdef WIN32
        std::vector<std::array<int, 4>> data_;
        std::vector<std::array<int, 4>> extdata_;
#else
        std::vector<std::array<unsigned int, 4>> data_;
        std::vector<std::array<unsigned int, 4>> extdata_;
#endif
    };
};

// Initialize static member data
const InstructionSet::InstructionSet_Internal InstructionSet::CPU_Rep;

// Print out supported instruction set extensions
int main()
{
    std::ofstream fo("/opt/sample_release/inference_engine_samples_build/cpuid.txt");
    auto& outstream = fo;//std::cout;

    auto support_message = [&outstream](std::string isa_feature, bool is_supported) {
        outstream << isa_feature << (is_supported ? " supported" : " not supported") << std::endl;
    };

    std::cout << InstructionSet::Vendor() << std::endl;
    std::cout << InstructionSet::Brand() << std::endl;

    support_message("3DNOW",       InstructionSet::_3DNOW());
    support_message("3DNOWEXT",    InstructionSet::_3DNOWEXT());
    support_message("ABM",         InstructionSet::ABM());
    support_message("ADX",         InstructionSet::ADX());
    support_message("AES",         InstructionSet::AES());
    support_message("AVX",         InstructionSet::AVX());
    support_message("AVX2",        InstructionSet::AVX2());
    support_message("AVX512CD",    InstructionSet::AVX512CD());
    support_message("AVX512F",     InstructionSet::AVX512F());
    support_message("AVX512ER",    InstructionSet::AVX512ER());
    support_message("AVX512PF",    InstructionSet::AVX512PF());
    support_message("BMI1",        InstructionSet::BMI1());
    support_message("BMI2",        InstructionSet::BMI2());
    support_message("CLFSH",       InstructionSet::CLFSH());
    support_message("CMPXCHG16B",  InstructionSet::CMPXCHG16B());
    support_message("CX8",         InstructionSet::CX8());
    support_message("ERMS",        InstructionSet::ERMS());
    support_message("F16C",        InstructionSet::F16C());
    support_message("FMA",         InstructionSet::FMA());
    support_message("FSGSBASE",    InstructionSet::FSGSBASE());
    support_message("FXSR",        InstructionSet::FXSR());
    support_message("HLE",         InstructionSet::HLE());
    support_message("INVPCID",     InstructionSet::INVPCID());
    support_message("LAHF",        InstructionSet::LAHF());
    support_message("LZCNT",       InstructionSet::LZCNT());
    support_message("MMX",         InstructionSet::MMX());
    support_message("MMXEXT",      InstructionSet::MMXEXT());
    support_message("MONITOR",     InstructionSet::MONITOR());
    support_message("MOVBE",       InstructionSet::MOVBE());
    support_message("MSR",         InstructionSet::MSR());
    support_message("OSXSAVE",     InstructionSet::OSXSAVE());
    support_message("PCLMULQDQ",   InstructionSet::PCLMULQDQ());
    support_message("POPCNT",      InstructionSet::POPCNT());
    support_message("PREFETCHWT1", InstructionSet::PREFETCHWT1());
    support_message("RDRAND",      InstructionSet::RDRAND());
    support_message("RDSEED",      InstructionSet::RDSEED());
    support_message("RDTSCP",      InstructionSet::RDTSCP());
    support_message("RTM",         InstructionSet::RTM());
    support_message("SEP",         InstructionSet::SEP());
    support_message("SHA",         InstructionSet::SHA());
    support_message("SSE",         InstructionSet::SSE());
    support_message("SSE2",        InstructionSet::SSE2());
    support_message("SSE3",        InstructionSet::SSE3());
    support_message("SSE4.1",      InstructionSet::SSE41());
    support_message("SSE4.2",      InstructionSet::SSE42());
    support_message("SSE4a",       InstructionSet::SSE4a());
    support_message("SSSE3",       InstructionSet::SSSE3());
    support_message("SYSCALL",     InstructionSet::SYSCALL());
    support_message("TBM",         InstructionSet::TBM());
    support_message("XOP",         InstructionSet::XOP());
    support_message("XSAVE",       InstructionSet::XSAVE());
    return 0;
}

Determining if the include file pthread.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_bf1d0/fast"
/usr/bin/make -f CMakeFiles/cmTC_bf1d0.dir/build.make CMakeFiles/cmTC_bf1d0.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_bf1d0.dir/CheckIncludeFile.c.o
/usr/bin/cc    -std=c++11   -o CMakeFiles/cmTC_bf1d0.dir/CheckIncludeFile.c.o   -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_bf1d0
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_bf1d0.dir/link.txt --verbose=1
/usr/bin/cc   -std=c++11    CMakeFiles/cmTC_bf1d0.dir/CheckIncludeFile.c.o  -o cmTC_bf1d0 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the function pthread_create exists in the pthread passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_f2c9c/fast"
/usr/bin/make -f CMakeFiles/cmTC_f2c9c.dir/build.make CMakeFiles/cmTC_f2c9c.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_f2c9c.dir/CheckFunctionExists.c.o
/usr/bin/cc    -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11   -o CMakeFiles/cmTC_f2c9c.dir/CheckFunctionExists.c.o   -c /usr/share/cmake-3.5/Modules/CheckFunctionExists.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_f2c9c
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_f2c9c.dir/link.txt --verbose=1
/usr/bin/cc   -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11    CMakeFiles/cmTC_f2c9c.dir/CheckFunctionExists.c.o  -o cmTC_f2c9c -rdynamic -lpthread 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file unistd.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_ae74a/fast"
/usr/bin/make -f CMakeFiles/cmTC_ae74a.dir/build.make CMakeFiles/cmTC_ae74a.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_ae74a.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_ae74a.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_ae74a
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_ae74a.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_ae74a.dir/CheckIncludeFile.cxx.o  -o cmTC_ae74a -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stdint.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_9977a/fast"
/usr/bin/make -f CMakeFiles/cmTC_9977a.dir/build.make CMakeFiles/cmTC_9977a.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_9977a.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_9977a.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_9977a
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_9977a.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_9977a.dir/CheckIncludeFile.cxx.o  -o cmTC_9977a -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file sys/types.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_56d7a/fast"
/usr/bin/make -f CMakeFiles/cmTC_56d7a.dir/build.make CMakeFiles/cmTC_56d7a.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_56d7a.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_56d7a.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_56d7a
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_56d7a.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_56d7a.dir/CheckIncludeFile.cxx.o  -o cmTC_56d7a -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file fnmatch.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_89d2f/fast"
/usr/bin/make -f CMakeFiles/cmTC_89d2f.dir/build.make CMakeFiles/cmTC_89d2f.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_89d2f.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_89d2f.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_89d2f
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_89d2f.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_89d2f.dir/CheckIncludeFile.cxx.o  -o cmTC_89d2f -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stddef.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_8c3e8/fast"
/usr/bin/make -f CMakeFiles/cmTC_8c3e8.dir/build.make CMakeFiles/cmTC_8c3e8.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_8c3e8.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_8c3e8.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_8c3e8
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_8c3e8.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_8c3e8.dir/CheckIncludeFile.cxx.o  -o cmTC_8c3e8 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining size of uint32_t passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_6343e/fast"
/usr/bin/make -f CMakeFiles/cmTC_6343e.dir/build.make CMakeFiles/cmTC_6343e.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_6343e.dir/uint32_t.cpp.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_6343e.dir/uint32_t.cpp.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CheckTypeSize/uint32_t.cpp
Linking CXX executable cmTC_6343e
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_6343e.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_6343e.dir/uint32_t.cpp.o  -o cmTC_6343e -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the strtoll exist passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_2bc33/fast"
/usr/bin/make -f CMakeFiles/cmTC_2bc33.dir/build.make CMakeFiles/cmTC_2bc33.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_2bc33.dir/CheckSymbolExists.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_2bc33.dir/CheckSymbolExists.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx
Linking CXX executable cmTC_2bc33
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_2bc33.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_2bc33.dir/CheckSymbolExists.cxx.o  -o cmTC_2bc33 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

File /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx:
/* */
#include <stdlib.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strtoll
  return ((int*)(&strtoll))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Performing C++ SOURCE FILE Test HAVE_CPUID_INFO succeeded with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_e869c/fast"
/usr/bin/make -f CMakeFiles/cmTC_e869c.dir/build.make CMakeFiles/cmTC_e869c.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_e869c.dir/src.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11   -o CMakeFiles/cmTC_e869c.dir/src.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/src.cxx
Linking CXX executable cmTC_e869c
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_e869c.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11    CMakeFiles/cmTC_e869c.dir/src.cxx.o  -o cmTC_e869c -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

Return value: 1
Source file was:

// InstructionSet.cpp
// Compile by using: cl /EHsc /W4 InstructionSet.cpp
// processor: x86, x64
// Uses the __cpuid intrinsic to get information about
// CPU extended instruction set support.
//
// source origin:
// https://msdn.microsoft.com/en-us/library/hskdteyh.aspx
// https://gcc.gnu.org/git/?p=gcc.git;a=blob_plain;f=gcc/config/i386/driver-i386.c


#include <iostream>
#include <fstream>
#include <vector>
#include <bitset>
#include <array>
#include <string>
#ifdef WIN32
#include <intrin.h>
#else
#include <cpuid.h>
#include <string.h>
#endif

class InstructionSet
{
    // forward declarations
    class InstructionSet_Internal;

public:
    // getters
    static std::string Vendor(void) { return CPU_Rep.vendor_; }
    static std::string Brand(void) { return CPU_Rep.brand_; }

    static bool SSE3(void) { return CPU_Rep.f_1_ECX_[0]; }
    static bool PCLMULQDQ(void) { return CPU_Rep.f_1_ECX_[1]; }
    static bool MONITOR(void) { return CPU_Rep.f_1_ECX_[3]; }
    static bool SSSE3(void) { return CPU_Rep.f_1_ECX_[9]; }
    static bool FMA(void) { return CPU_Rep.f_1_ECX_[12]; }
    static bool CMPXCHG16B(void) { return CPU_Rep.f_1_ECX_[13]; }
    static bool SSE41(void) { return CPU_Rep.f_1_ECX_[19]; }
    static bool SSE42(void) { return CPU_Rep.f_1_ECX_[20]; }
    static bool MOVBE(void) { return CPU_Rep.f_1_ECX_[22]; }
    static bool POPCNT(void) { return CPU_Rep.f_1_ECX_[23]; }
    static bool AES(void) { return CPU_Rep.f_1_ECX_[25]; }
    static bool XSAVE(void) { return CPU_Rep.f_1_ECX_[26]; }
    static bool OSXSAVE(void) { return CPU_Rep.f_1_ECX_[27]; }
    static bool AVX(void) { return CPU_Rep.f_1_ECX_[28]; }
    static bool F16C(void) { return CPU_Rep.f_1_ECX_[29]; }
    static bool RDRAND(void) { return CPU_Rep.f_1_ECX_[30]; }

    static bool MSR(void) { return CPU_Rep.f_1_EDX_[5]; }
    static bool CX8(void) { return CPU_Rep.f_1_EDX_[8]; }
    static bool SEP(void) { return CPU_Rep.f_1_EDX_[11]; }
    static bool CMOV(void) { return CPU_Rep.f_1_EDX_[15]; }
    static bool CLFSH(void) { return CPU_Rep.f_1_EDX_[19]; }
    static bool MMX(void) { return CPU_Rep.f_1_EDX_[23]; }
    static bool FXSR(void) { return CPU_Rep.f_1_EDX_[24]; }
    static bool SSE(void) { return CPU_Rep.f_1_EDX_[25]; }
    static bool SSE2(void) { return CPU_Rep.f_1_EDX_[26]; }

    static bool FSGSBASE(void) { return CPU_Rep.f_7_EBX_[0]; }
    static bool BMI1(void) { return CPU_Rep.f_7_EBX_[3]; }
    static bool HLE(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[4]; }
    static bool AVX2(void) { return CPU_Rep.f_7_EBX_[5]; }
    static bool BMI2(void) { return CPU_Rep.f_7_EBX_[8]; }
    static bool ERMS(void) { return CPU_Rep.f_7_EBX_[9]; }
    static bool INVPCID(void) { return CPU_Rep.f_7_EBX_[10]; }
    static bool RTM(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[11]; }
    static bool AVX512F(void) { return CPU_Rep.f_7_EBX_[16]; }
    static bool RDSEED(void) { return CPU_Rep.f_7_EBX_[18]; }
    static bool ADX(void) { return CPU_Rep.f_7_EBX_[19]; }
    static bool AVX512PF(void) { return CPU_Rep.f_7_EBX_[26]; }
    static bool AVX512ER(void) { return CPU_Rep.f_7_EBX_[27]; }
    static bool AVX512CD(void) { return CPU_Rep.f_7_EBX_[28]; }
    static bool SHA(void) { return CPU_Rep.f_7_EBX_[29]; }

    static bool PREFETCHWT1(void) { return CPU_Rep.f_7_ECX_[0]; }

    static bool LAHF(void) { return CPU_Rep.f_81_ECX_[0]; }
    static bool LZCNT(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_ECX_[5]; }
    static bool ABM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[5]; }
    static bool SSE4a(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[6]; }
    static bool XOP(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[11]; }
    static bool TBM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[21]; }

    static bool SYSCALL(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[11]; }
    static bool MMXEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[22]; }
    static bool RDTSCP(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[27]; }
    static bool _3DNOWEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[30]; }
    static bool _3DNOW(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[31]; }

private:
    static const InstructionSet_Internal CPU_Rep;

    class InstructionSet_Internal
    {
    public:
        InstructionSet_Internal()
            : nIds_{ 0 },
            nExIds_{ 0 },
            isIntel_{ false },
            isAMD_{ false },
            f_1_ECX_{ 0 },
            f_1_EDX_{ 0 },
            f_7_EBX_{ 0 },
            f_7_ECX_{ 0 },
            f_81_ECX_{ 0 },
            f_81_EDX_{ 0 },
            data_{},
            extdata_{}
        {
#ifdef WIN32
            std::array<int, 4> cpui;
#else
            std::array<unsigned int, 4> cpui;
#endif

            // Calling __cpuid with 0x0 as the function_id argument
            // gets the number of the highest valid function ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0);
#else
            cpui[0] = __get_cpuid_max(0, &cpui[1]);
#endif
            nIds_ = cpui[0];

            for (int i = 0; i <= nIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif

                data_.push_back(cpui);
            }

            // Capture vendor string
            char vendor[0x20];
            memset(vendor, 0, sizeof(vendor));
            *reinterpret_cast<int*>(vendor + 0) = data_[0][1];
            *reinterpret_cast<int*>(vendor + 4) = data_[0][3];
            *reinterpret_cast<int*>(vendor + 8) = data_[0][2];
            vendor_ = vendor;
            if (vendor_ == "GenuineIntel")
            {
                isIntel_ = true;
            }
            else if (vendor_ == "AuthenticAMD")
            {
                isAMD_ = true;
            }

            // load bitset with flags for function 0x00000001
            if (nIds_ >= 1)
            {
                f_1_ECX_ = data_[1][2];
                f_1_EDX_ = data_[1][3];
            }

            // load bitset with flags for function 0x00000007
            if (nIds_ >= 7)
            {
                f_7_EBX_ = data_[7][1];
                f_7_ECX_ = data_[7][2];
            }

            // Calling __cpuid with 0x80000000 as the function_id argument
            // gets the number of the highest valid extended ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0x80000000);
#else
            __cpuid(0x80000000, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
            nExIds_ = cpui[0];

            char brand[0x40];
            memset(brand, 0, sizeof(brand));

            for (int i = 0x80000000; i <= nExIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
                extdata_.push_back(cpui);
            }

            // load bitset with flags for function 0x80000001
            if ((unsigned)nExIds_ >= 0x80000001)
            {
                f_81_ECX_ = extdata_[1][2];
                f_81_EDX_ = extdata_[1][3];
            }

            // Interpret CPU brand string if reported
            if ((unsigned)nExIds_ >= 0x80000004)
            {
                memcpy(brand +  0, extdata_[2].data(), sizeof(cpui));
                memcpy(brand + 16, extdata_[3].data(), sizeof(cpui));
                memcpy(brand + 32, extdata_[4].data(), sizeof(cpui));
                brand_ = brand;
            }
        };

        int nIds_;
        int nExIds_;
        std::string vendor_;
        std::string brand_;
        bool isIntel_;
        bool isAMD_;
        std::bitset<32> f_1_ECX_;
        std::bitset<32> f_1_EDX_;
        std::bitset<32> f_7_EBX_;
        std::bitset<32> f_7_ECX_;
        std::bitset<32> f_81_ECX_;
        std::bitset<32> f_81_EDX_;
#ifdef WIN32
        std::vector<std::array<int, 4>> data_;
        std::vector<std::array<int, 4>> extdata_;
#else
        std::vector<std::array<unsigned int, 4>> data_;
        std::vector<std::array<unsigned int, 4>> extdata_;
#endif
    };
};

// Initialize static member data
const InstructionSet::InstructionSet_Internal InstructionSet::CPU_Rep;

// Print out supported instruction set extensions
int main()
{
    std::ofstream fo("/opt/sample_release/inference_engine_samples_build/cpuid.txt");
    auto& outstream = fo;//std::cout;

    auto support_message = [&outstream](std::string isa_feature, bool is_supported) {
        outstream << isa_feature << (is_supported ? " supported" : " not supported") << std::endl;
    };

    std::cout << InstructionSet::Vendor() << std::endl;
    std::cout << InstructionSet::Brand() << std::endl;

    support_message("3DNOW",       InstructionSet::_3DNOW());
    support_message("3DNOWEXT",    InstructionSet::_3DNOWEXT());
    support_message("ABM",         InstructionSet::ABM());
    support_message("ADX",         InstructionSet::ADX());
    support_message("AES",         InstructionSet::AES());
    support_message("AVX",         InstructionSet::AVX());
    support_message("AVX2",        InstructionSet::AVX2());
    support_message("AVX512CD",    InstructionSet::AVX512CD());
    support_message("AVX512F",     InstructionSet::AVX512F());
    support_message("AVX512ER",    InstructionSet::AVX512ER());
    support_message("AVX512PF",    InstructionSet::AVX512PF());
    support_message("BMI1",        InstructionSet::BMI1());
    support_message("BMI2",        InstructionSet::BMI2());
    support_message("CLFSH",       InstructionSet::CLFSH());
    support_message("CMPXCHG16B",  InstructionSet::CMPXCHG16B());
    support_message("CX8",         InstructionSet::CX8());
    support_message("ERMS",        InstructionSet::ERMS());
    support_message("F16C",        InstructionSet::F16C());
    support_message("FMA",         InstructionSet::FMA());
    support_message("FSGSBASE",    InstructionSet::FSGSBASE());
    support_message("FXSR",        InstructionSet::FXSR());
    support_message("HLE",         InstructionSet::HLE());
    support_message("INVPCID",     InstructionSet::INVPCID());
    support_message("LAHF",        InstructionSet::LAHF());
    support_message("LZCNT",       InstructionSet::LZCNT());
    support_message("MMX",         InstructionSet::MMX());
    support_message("MMXEXT",      InstructionSet::MMXEXT());
    support_message("MONITOR",     InstructionSet::MONITOR());
    support_message("MOVBE",       InstructionSet::MOVBE());
    support_message("MSR",         InstructionSet::MSR());
    support_message("OSXSAVE",     InstructionSet::OSXSAVE());
    support_message("PCLMULQDQ",   InstructionSet::PCLMULQDQ());
    support_message("POPCNT",      InstructionSet::POPCNT());
    support_message("PREFETCHWT1", InstructionSet::PREFETCHWT1());
    support_message("RDRAND",      InstructionSet::RDRAND());
    support_message("RDSEED",      InstructionSet::RDSEED());
    support_message("RDTSCP",      InstructionSet::RDTSCP());
    support_message("RTM",         InstructionSet::RTM());
    support_message("SEP",         InstructionSet::SEP());
    support_message("SHA",         InstructionSet::SHA());
    support_message("SSE",         InstructionSet::SSE());
    support_message("SSE2",        InstructionSet::SSE2());
    support_message("SSE3",        InstructionSet::SSE3());
    support_message("SSE4.1",      InstructionSet::SSE41());
    support_message("SSE4.2",      InstructionSet::SSE42());
    support_message("SSE4a",       InstructionSet::SSE4a());
    support_message("SSSE3",       InstructionSet::SSSE3());
    support_message("SYSCALL",     InstructionSet::SYSCALL());
    support_message("TBM",         InstructionSet::TBM());
    support_message("XOP",         InstructionSet::XOP());
    support_message("XSAVE",       InstructionSet::XSAVE());
    return 0;
}

Determining if the include file pthread.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_a63d5/fast"
/usr/bin/make -f CMakeFiles/cmTC_a63d5.dir/build.make CMakeFiles/cmTC_a63d5.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_a63d5.dir/CheckIncludeFile.c.o
/usr/bin/cc    -std=c++11   -o CMakeFiles/cmTC_a63d5.dir/CheckIncludeFile.c.o   -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_a63d5
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_a63d5.dir/link.txt --verbose=1
/usr/bin/cc   -std=c++11    CMakeFiles/cmTC_a63d5.dir/CheckIncludeFile.c.o  -o cmTC_a63d5 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the function pthread_create exists in the pthread passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_0efe7/fast"
/usr/bin/make -f CMakeFiles/cmTC_0efe7.dir/build.make CMakeFiles/cmTC_0efe7.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_0efe7.dir/CheckFunctionExists.c.o
/usr/bin/cc    -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11   -o CMakeFiles/cmTC_0efe7.dir/CheckFunctionExists.c.o   -c /usr/share/cmake-3.5/Modules/CheckFunctionExists.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_0efe7
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_0efe7.dir/link.txt --verbose=1
/usr/bin/cc   -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11    CMakeFiles/cmTC_0efe7.dir/CheckFunctionExists.c.o  -o cmTC_0efe7 -rdynamic -lpthread 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file unistd.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_a51be/fast"
/usr/bin/make -f CMakeFiles/cmTC_a51be.dir/build.make CMakeFiles/cmTC_a51be.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_a51be.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_a51be.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_a51be
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_a51be.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_a51be.dir/CheckIncludeFile.cxx.o  -o cmTC_a51be -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stdint.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_7418f/fast"
/usr/bin/make -f CMakeFiles/cmTC_7418f.dir/build.make CMakeFiles/cmTC_7418f.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_7418f.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_7418f.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_7418f
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_7418f.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_7418f.dir/CheckIncludeFile.cxx.o  -o cmTC_7418f -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file sys/types.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_48f2a/fast"
/usr/bin/make -f CMakeFiles/cmTC_48f2a.dir/build.make CMakeFiles/cmTC_48f2a.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_48f2a.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_48f2a.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_48f2a
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_48f2a.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_48f2a.dir/CheckIncludeFile.cxx.o  -o cmTC_48f2a -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file fnmatch.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_e63a8/fast"
/usr/bin/make -f CMakeFiles/cmTC_e63a8.dir/build.make CMakeFiles/cmTC_e63a8.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_e63a8.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_e63a8.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_e63a8
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_e63a8.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_e63a8.dir/CheckIncludeFile.cxx.o  -o cmTC_e63a8 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stddef.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_24906/fast"
/usr/bin/make -f CMakeFiles/cmTC_24906.dir/build.make CMakeFiles/cmTC_24906.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_24906.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_24906.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_24906
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_24906.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_24906.dir/CheckIncludeFile.cxx.o  -o cmTC_24906 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining size of uint32_t passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_1099a/fast"
/usr/bin/make -f CMakeFiles/cmTC_1099a.dir/build.make CMakeFiles/cmTC_1099a.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_1099a.dir/uint32_t.cpp.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_1099a.dir/uint32_t.cpp.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CheckTypeSize/uint32_t.cpp
Linking CXX executable cmTC_1099a
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_1099a.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_1099a.dir/uint32_t.cpp.o  -o cmTC_1099a -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the strtoll exist passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_33bca/fast"
/usr/bin/make -f CMakeFiles/cmTC_33bca.dir/build.make CMakeFiles/cmTC_33bca.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_33bca.dir/CheckSymbolExists.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_33bca.dir/CheckSymbolExists.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx
Linking CXX executable cmTC_33bca
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_33bca.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_33bca.dir/CheckSymbolExists.cxx.o  -o cmTC_33bca -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

File /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx:
/* */
#include <stdlib.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strtoll
  return ((int*)(&strtoll))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Performing C++ SOURCE FILE Test HAVE_CPUID_INFO succeeded with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_8b6f3/fast"
/usr/bin/make -f CMakeFiles/cmTC_8b6f3.dir/build.make CMakeFiles/cmTC_8b6f3.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_8b6f3.dir/src.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11   -o CMakeFiles/cmTC_8b6f3.dir/src.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/src.cxx
Linking CXX executable cmTC_8b6f3
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_8b6f3.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11    CMakeFiles/cmTC_8b6f3.dir/src.cxx.o  -o cmTC_8b6f3 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

Return value: 1
Source file was:

// InstructionSet.cpp
// Compile by using: cl /EHsc /W4 InstructionSet.cpp
// processor: x86, x64
// Uses the __cpuid intrinsic to get information about
// CPU extended instruction set support.
//
// source origin:
// https://msdn.microsoft.com/en-us/library/hskdteyh.aspx
// https://gcc.gnu.org/git/?p=gcc.git;a=blob_plain;f=gcc/config/i386/driver-i386.c


#include <iostream>
#include <fstream>
#include <vector>
#include <bitset>
#include <array>
#include <string>
#ifdef WIN32
#include <intrin.h>
#else
#include <cpuid.h>
#include <string.h>
#endif

class InstructionSet
{
    // forward declarations
    class InstructionSet_Internal;

public:
    // getters
    static std::string Vendor(void) { return CPU_Rep.vendor_; }
    static std::string Brand(void) { return CPU_Rep.brand_; }

    static bool SSE3(void) { return CPU_Rep.f_1_ECX_[0]; }
    static bool PCLMULQDQ(void) { return CPU_Rep.f_1_ECX_[1]; }
    static bool MONITOR(void) { return CPU_Rep.f_1_ECX_[3]; }
    static bool SSSE3(void) { return CPU_Rep.f_1_ECX_[9]; }
    static bool FMA(void) { return CPU_Rep.f_1_ECX_[12]; }
    static bool CMPXCHG16B(void) { return CPU_Rep.f_1_ECX_[13]; }
    static bool SSE41(void) { return CPU_Rep.f_1_ECX_[19]; }
    static bool SSE42(void) { return CPU_Rep.f_1_ECX_[20]; }
    static bool MOVBE(void) { return CPU_Rep.f_1_ECX_[22]; }
    static bool POPCNT(void) { return CPU_Rep.f_1_ECX_[23]; }
    static bool AES(void) { return CPU_Rep.f_1_ECX_[25]; }
    static bool XSAVE(void) { return CPU_Rep.f_1_ECX_[26]; }
    static bool OSXSAVE(void) { return CPU_Rep.f_1_ECX_[27]; }
    static bool AVX(void) { return CPU_Rep.f_1_ECX_[28]; }
    static bool F16C(void) { return CPU_Rep.f_1_ECX_[29]; }
    static bool RDRAND(void) { return CPU_Rep.f_1_ECX_[30]; }

    static bool MSR(void) { return CPU_Rep.f_1_EDX_[5]; }
    static bool CX8(void) { return CPU_Rep.f_1_EDX_[8]; }
    static bool SEP(void) { return CPU_Rep.f_1_EDX_[11]; }
    static bool CMOV(void) { return CPU_Rep.f_1_EDX_[15]; }
    static bool CLFSH(void) { return CPU_Rep.f_1_EDX_[19]; }
    static bool MMX(void) { return CPU_Rep.f_1_EDX_[23]; }
    static bool FXSR(void) { return CPU_Rep.f_1_EDX_[24]; }
    static bool SSE(void) { return CPU_Rep.f_1_EDX_[25]; }
    static bool SSE2(void) { return CPU_Rep.f_1_EDX_[26]; }

    static bool FSGSBASE(void) { return CPU_Rep.f_7_EBX_[0]; }
    static bool BMI1(void) { return CPU_Rep.f_7_EBX_[3]; }
    static bool HLE(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[4]; }
    static bool AVX2(void) { return CPU_Rep.f_7_EBX_[5]; }
    static bool BMI2(void) { return CPU_Rep.f_7_EBX_[8]; }
    static bool ERMS(void) { return CPU_Rep.f_7_EBX_[9]; }
    static bool INVPCID(void) { return CPU_Rep.f_7_EBX_[10]; }
    static bool RTM(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[11]; }
    static bool AVX512F(void) { return CPU_Rep.f_7_EBX_[16]; }
    static bool RDSEED(void) { return CPU_Rep.f_7_EBX_[18]; }
    static bool ADX(void) { return CPU_Rep.f_7_EBX_[19]; }
    static bool AVX512PF(void) { return CPU_Rep.f_7_EBX_[26]; }
    static bool AVX512ER(void) { return CPU_Rep.f_7_EBX_[27]; }
    static bool AVX512CD(void) { return CPU_Rep.f_7_EBX_[28]; }
    static bool SHA(void) { return CPU_Rep.f_7_EBX_[29]; }

    static bool PREFETCHWT1(void) { return CPU_Rep.f_7_ECX_[0]; }

    static bool LAHF(void) { return CPU_Rep.f_81_ECX_[0]; }
    static bool LZCNT(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_ECX_[5]; }
    static bool ABM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[5]; }
    static bool SSE4a(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[6]; }
    static bool XOP(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[11]; }
    static bool TBM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[21]; }

    static bool SYSCALL(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[11]; }
    static bool MMXEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[22]; }
    static bool RDTSCP(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[27]; }
    static bool _3DNOWEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[30]; }
    static bool _3DNOW(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[31]; }

private:
    static const InstructionSet_Internal CPU_Rep;

    class InstructionSet_Internal
    {
    public:
        InstructionSet_Internal()
            : nIds_{ 0 },
            nExIds_{ 0 },
            isIntel_{ false },
            isAMD_{ false },
            f_1_ECX_{ 0 },
            f_1_EDX_{ 0 },
            f_7_EBX_{ 0 },
            f_7_ECX_{ 0 },
            f_81_ECX_{ 0 },
            f_81_EDX_{ 0 },
            data_{},
            extdata_{}
        {
#ifdef WIN32
            std::array<int, 4> cpui;
#else
            std::array<unsigned int, 4> cpui;
#endif

            // Calling __cpuid with 0x0 as the function_id argument
            // gets the number of the highest valid function ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0);
#else
            cpui[0] = __get_cpuid_max(0, &cpui[1]);
#endif
            nIds_ = cpui[0];

            for (int i = 0; i <= nIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif

                data_.push_back(cpui);
            }

            // Capture vendor string
            char vendor[0x20];
            memset(vendor, 0, sizeof(vendor));
            *reinterpret_cast<int*>(vendor + 0) = data_[0][1];
            *reinterpret_cast<int*>(vendor + 4) = data_[0][3];
            *reinterpret_cast<int*>(vendor + 8) = data_[0][2];
            vendor_ = vendor;
            if (vendor_ == "GenuineIntel")
            {
                isIntel_ = true;
            }
            else if (vendor_ == "AuthenticAMD")
            {
                isAMD_ = true;
            }

            // load bitset with flags for function 0x00000001
            if (nIds_ >= 1)
            {
                f_1_ECX_ = data_[1][2];
                f_1_EDX_ = data_[1][3];
            }

            // load bitset with flags for function 0x00000007
            if (nIds_ >= 7)
            {
                f_7_EBX_ = data_[7][1];
                f_7_ECX_ = data_[7][2];
            }

            // Calling __cpuid with 0x80000000 as the function_id argument
            // gets the number of the highest valid extended ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0x80000000);
#else
            __cpuid(0x80000000, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
            nExIds_ = cpui[0];

            char brand[0x40];
            memset(brand, 0, sizeof(brand));

            for (int i = 0x80000000; i <= nExIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
                extdata_.push_back(cpui);
            }

            // load bitset with flags for function 0x80000001
            if ((unsigned)nExIds_ >= 0x80000001)
            {
                f_81_ECX_ = extdata_[1][2];
                f_81_EDX_ = extdata_[1][3];
            }

            // Interpret CPU brand string if reported
            if ((unsigned)nExIds_ >= 0x80000004)
            {
                memcpy(brand +  0, extdata_[2].data(), sizeof(cpui));
                memcpy(brand + 16, extdata_[3].data(), sizeof(cpui));
                memcpy(brand + 32, extdata_[4].data(), sizeof(cpui));
                brand_ = brand;
            }
        };

        int nIds_;
        int nExIds_;
        std::string vendor_;
        std::string brand_;
        bool isIntel_;
        bool isAMD_;
        std::bitset<32> f_1_ECX_;
        std::bitset<32> f_1_EDX_;
        std::bitset<32> f_7_EBX_;
        std::bitset<32> f_7_ECX_;
        std::bitset<32> f_81_ECX_;
        std::bitset<32> f_81_EDX_;
#ifdef WIN32
        std::vector<std::array<int, 4>> data_;
        std::vector<std::array<int, 4>> extdata_;
#else
        std::vector<std::array<unsigned int, 4>> data_;
        std::vector<std::array<unsigned int, 4>> extdata_;
#endif
    };
};

// Initialize static member data
const InstructionSet::InstructionSet_Internal InstructionSet::CPU_Rep;

// Print out supported instruction set extensions
int main()
{
    std::ofstream fo("/opt/sample_release/inference_engine_samples_build/cpuid.txt");
    auto& outstream = fo;//std::cout;

    auto support_message = [&outstream](std::string isa_feature, bool is_supported) {
        outstream << isa_feature << (is_supported ? " supported" : " not supported") << std::endl;
    };

    std::cout << InstructionSet::Vendor() << std::endl;
    std::cout << InstructionSet::Brand() << std::endl;

    support_message("3DNOW",       InstructionSet::_3DNOW());
    support_message("3DNOWEXT",    InstructionSet::_3DNOWEXT());
    support_message("ABM",         InstructionSet::ABM());
    support_message("ADX",         InstructionSet::ADX());
    support_message("AES",         InstructionSet::AES());
    support_message("AVX",         InstructionSet::AVX());
    support_message("AVX2",        InstructionSet::AVX2());
    support_message("AVX512CD",    InstructionSet::AVX512CD());
    support_message("AVX512F",     InstructionSet::AVX512F());
    support_message("AVX512ER",    InstructionSet::AVX512ER());
    support_message("AVX512PF",    InstructionSet::AVX512PF());
    support_message("BMI1",        InstructionSet::BMI1());
    support_message("BMI2",        InstructionSet::BMI2());
    support_message("CLFSH",       InstructionSet::CLFSH());
    support_message("CMPXCHG16B",  InstructionSet::CMPXCHG16B());
    support_message("CX8",         InstructionSet::CX8());
    support_message("ERMS",        InstructionSet::ERMS());
    support_message("F16C",        InstructionSet::F16C());
    support_message("FMA",         InstructionSet::FMA());
    support_message("FSGSBASE",    InstructionSet::FSGSBASE());
    support_message("FXSR",        InstructionSet::FXSR());
    support_message("HLE",         InstructionSet::HLE());
    support_message("INVPCID",     InstructionSet::INVPCID());
    support_message("LAHF",        InstructionSet::LAHF());
    support_message("LZCNT",       InstructionSet::LZCNT());
    support_message("MMX",         InstructionSet::MMX());
    support_message("MMXEXT",      InstructionSet::MMXEXT());
    support_message("MONITOR",     InstructionSet::MONITOR());
    support_message("MOVBE",       InstructionSet::MOVBE());
    support_message("MSR",         InstructionSet::MSR());
    support_message("OSXSAVE",     InstructionSet::OSXSAVE());
    support_message("PCLMULQDQ",   InstructionSet::PCLMULQDQ());
    support_message("POPCNT",      InstructionSet::POPCNT());
    support_message("PREFETCHWT1", InstructionSet::PREFETCHWT1());
    support_message("RDRAND",      InstructionSet::RDRAND());
    support_message("RDSEED",      InstructionSet::RDSEED());
    support_message("RDTSCP",      InstructionSet::RDTSCP());
    support_message("RTM",         InstructionSet::RTM());
    support_message("SEP",         InstructionSet::SEP());
    support_message("SHA",         InstructionSet::SHA());
    support_message("SSE",         InstructionSet::SSE());
    support_message("SSE2",        InstructionSet::SSE2());
    support_message("SSE3",        InstructionSet::SSE3());
    support_message("SSE4.1",      InstructionSet::SSE41());
    support_message("SSE4.2",      InstructionSet::SSE42());
    support_message("SSE4a",       InstructionSet::SSE4a());
    support_message("SSSE3",       InstructionSet::SSSE3());
    support_message("SYSCALL",     InstructionSet::SYSCALL());
    support_message("TBM",         InstructionSet::TBM());
    support_message("XOP",         InstructionSet::XOP());
    support_message("XSAVE",       InstructionSet::XSAVE());
    return 0;
}

Determining if the include file pthread.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_b8ac4/fast"
/usr/bin/make -f CMakeFiles/cmTC_b8ac4.dir/build.make CMakeFiles/cmTC_b8ac4.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_b8ac4.dir/CheckIncludeFile.c.o
/usr/bin/cc    -std=c++11   -o CMakeFiles/cmTC_b8ac4.dir/CheckIncludeFile.c.o   -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_b8ac4
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_b8ac4.dir/link.txt --verbose=1
/usr/bin/cc   -std=c++11    CMakeFiles/cmTC_b8ac4.dir/CheckIncludeFile.c.o  -o cmTC_b8ac4 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the function pthread_create exists in the pthread passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_46688/fast"
/usr/bin/make -f CMakeFiles/cmTC_46688.dir/build.make CMakeFiles/cmTC_46688.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_46688.dir/CheckFunctionExists.c.o
/usr/bin/cc    -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11   -o CMakeFiles/cmTC_46688.dir/CheckFunctionExists.c.o   -c /usr/share/cmake-3.5/Modules/CheckFunctionExists.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_46688
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_46688.dir/link.txt --verbose=1
/usr/bin/cc   -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11    CMakeFiles/cmTC_46688.dir/CheckFunctionExists.c.o  -o cmTC_46688 -rdynamic -lpthread 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file unistd.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_eef07/fast"
/usr/bin/make -f CMakeFiles/cmTC_eef07.dir/build.make CMakeFiles/cmTC_eef07.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_eef07.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_eef07.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_eef07
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_eef07.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_eef07.dir/CheckIncludeFile.cxx.o  -o cmTC_eef07 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stdint.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_465ea/fast"
/usr/bin/make -f CMakeFiles/cmTC_465ea.dir/build.make CMakeFiles/cmTC_465ea.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_465ea.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_465ea.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_465ea
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_465ea.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_465ea.dir/CheckIncludeFile.cxx.o  -o cmTC_465ea -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file sys/types.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_7a940/fast"
/usr/bin/make -f CMakeFiles/cmTC_7a940.dir/build.make CMakeFiles/cmTC_7a940.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_7a940.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_7a940.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_7a940
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_7a940.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_7a940.dir/CheckIncludeFile.cxx.o  -o cmTC_7a940 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file fnmatch.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_6b273/fast"
/usr/bin/make -f CMakeFiles/cmTC_6b273.dir/build.make CMakeFiles/cmTC_6b273.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_6b273.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_6b273.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_6b273
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_6b273.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_6b273.dir/CheckIncludeFile.cxx.o  -o cmTC_6b273 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stddef.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_5e1a1/fast"
/usr/bin/make -f CMakeFiles/cmTC_5e1a1.dir/build.make CMakeFiles/cmTC_5e1a1.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_5e1a1.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_5e1a1.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_5e1a1
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5e1a1.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_5e1a1.dir/CheckIncludeFile.cxx.o  -o cmTC_5e1a1 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining size of uint32_t passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_648cd/fast"
/usr/bin/make -f CMakeFiles/cmTC_648cd.dir/build.make CMakeFiles/cmTC_648cd.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_648cd.dir/uint32_t.cpp.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_648cd.dir/uint32_t.cpp.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CheckTypeSize/uint32_t.cpp
Linking CXX executable cmTC_648cd
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_648cd.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_648cd.dir/uint32_t.cpp.o  -o cmTC_648cd -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the strtoll exist passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_19ab1/fast"
/usr/bin/make -f CMakeFiles/cmTC_19ab1.dir/build.make CMakeFiles/cmTC_19ab1.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_19ab1.dir/CheckSymbolExists.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_19ab1.dir/CheckSymbolExists.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx
Linking CXX executable cmTC_19ab1
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_19ab1.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_19ab1.dir/CheckSymbolExists.cxx.o  -o cmTC_19ab1 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

File /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx:
/* */
#include <stdlib.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strtoll
  return ((int*)(&strtoll))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Performing C++ SOURCE FILE Test HAVE_CPUID_INFO succeeded with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_bb2a1/fast"
/usr/bin/make -f CMakeFiles/cmTC_bb2a1.dir/build.make CMakeFiles/cmTC_bb2a1.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_bb2a1.dir/src.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11   -o CMakeFiles/cmTC_bb2a1.dir/src.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/src.cxx
Linking CXX executable cmTC_bb2a1
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_bb2a1.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11    CMakeFiles/cmTC_bb2a1.dir/src.cxx.o  -o cmTC_bb2a1 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

Return value: 1
Source file was:

// InstructionSet.cpp
// Compile by using: cl /EHsc /W4 InstructionSet.cpp
// processor: x86, x64
// Uses the __cpuid intrinsic to get information about
// CPU extended instruction set support.
//
// source origin:
// https://msdn.microsoft.com/en-us/library/hskdteyh.aspx
// https://gcc.gnu.org/git/?p=gcc.git;a=blob_plain;f=gcc/config/i386/driver-i386.c


#include <iostream>
#include <fstream>
#include <vector>
#include <bitset>
#include <array>
#include <string>
#ifdef WIN32
#include <intrin.h>
#else
#include <cpuid.h>
#include <string.h>
#endif

class InstructionSet
{
    // forward declarations
    class InstructionSet_Internal;

public:
    // getters
    static std::string Vendor(void) { return CPU_Rep.vendor_; }
    static std::string Brand(void) { return CPU_Rep.brand_; }

    static bool SSE3(void) { return CPU_Rep.f_1_ECX_[0]; }
    static bool PCLMULQDQ(void) { return CPU_Rep.f_1_ECX_[1]; }
    static bool MONITOR(void) { return CPU_Rep.f_1_ECX_[3]; }
    static bool SSSE3(void) { return CPU_Rep.f_1_ECX_[9]; }
    static bool FMA(void) { return CPU_Rep.f_1_ECX_[12]; }
    static bool CMPXCHG16B(void) { return CPU_Rep.f_1_ECX_[13]; }
    static bool SSE41(void) { return CPU_Rep.f_1_ECX_[19]; }
    static bool SSE42(void) { return CPU_Rep.f_1_ECX_[20]; }
    static bool MOVBE(void) { return CPU_Rep.f_1_ECX_[22]; }
    static bool POPCNT(void) { return CPU_Rep.f_1_ECX_[23]; }
    static bool AES(void) { return CPU_Rep.f_1_ECX_[25]; }
    static bool XSAVE(void) { return CPU_Rep.f_1_ECX_[26]; }
    static bool OSXSAVE(void) { return CPU_Rep.f_1_ECX_[27]; }
    static bool AVX(void) { return CPU_Rep.f_1_ECX_[28]; }
    static bool F16C(void) { return CPU_Rep.f_1_ECX_[29]; }
    static bool RDRAND(void) { return CPU_Rep.f_1_ECX_[30]; }

    static bool MSR(void) { return CPU_Rep.f_1_EDX_[5]; }
    static bool CX8(void) { return CPU_Rep.f_1_EDX_[8]; }
    static bool SEP(void) { return CPU_Rep.f_1_EDX_[11]; }
    static bool CMOV(void) { return CPU_Rep.f_1_EDX_[15]; }
    static bool CLFSH(void) { return CPU_Rep.f_1_EDX_[19]; }
    static bool MMX(void) { return CPU_Rep.f_1_EDX_[23]; }
    static bool FXSR(void) { return CPU_Rep.f_1_EDX_[24]; }
    static bool SSE(void) { return CPU_Rep.f_1_EDX_[25]; }
    static bool SSE2(void) { return CPU_Rep.f_1_EDX_[26]; }

    static bool FSGSBASE(void) { return CPU_Rep.f_7_EBX_[0]; }
    static bool BMI1(void) { return CPU_Rep.f_7_EBX_[3]; }
    static bool HLE(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[4]; }
    static bool AVX2(void) { return CPU_Rep.f_7_EBX_[5]; }
    static bool BMI2(void) { return CPU_Rep.f_7_EBX_[8]; }
    static bool ERMS(void) { return CPU_Rep.f_7_EBX_[9]; }
    static bool INVPCID(void) { return CPU_Rep.f_7_EBX_[10]; }
    static bool RTM(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[11]; }
    static bool AVX512F(void) { return CPU_Rep.f_7_EBX_[16]; }
    static bool RDSEED(void) { return CPU_Rep.f_7_EBX_[18]; }
    static bool ADX(void) { return CPU_Rep.f_7_EBX_[19]; }
    static bool AVX512PF(void) { return CPU_Rep.f_7_EBX_[26]; }
    static bool AVX512ER(void) { return CPU_Rep.f_7_EBX_[27]; }
    static bool AVX512CD(void) { return CPU_Rep.f_7_EBX_[28]; }
    static bool SHA(void) { return CPU_Rep.f_7_EBX_[29]; }

    static bool PREFETCHWT1(void) { return CPU_Rep.f_7_ECX_[0]; }

    static bool LAHF(void) { return CPU_Rep.f_81_ECX_[0]; }
    static bool LZCNT(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_ECX_[5]; }
    static bool ABM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[5]; }
    static bool SSE4a(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[6]; }
    static bool XOP(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[11]; }
    static bool TBM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[21]; }

    static bool SYSCALL(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[11]; }
    static bool MMXEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[22]; }
    static bool RDTSCP(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[27]; }
    static bool _3DNOWEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[30]; }
    static bool _3DNOW(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[31]; }

private:
    static const InstructionSet_Internal CPU_Rep;

    class InstructionSet_Internal
    {
    public:
        InstructionSet_Internal()
            : nIds_{ 0 },
            nExIds_{ 0 },
            isIntel_{ false },
            isAMD_{ false },
            f_1_ECX_{ 0 },
            f_1_EDX_{ 0 },
            f_7_EBX_{ 0 },
            f_7_ECX_{ 0 },
            f_81_ECX_{ 0 },
            f_81_EDX_{ 0 },
            data_{},
            extdata_{}
        {
#ifdef WIN32
            std::array<int, 4> cpui;
#else
            std::array<unsigned int, 4> cpui;
#endif

            // Calling __cpuid with 0x0 as the function_id argument
            // gets the number of the highest valid function ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0);
#else
            cpui[0] = __get_cpuid_max(0, &cpui[1]);
#endif
            nIds_ = cpui[0];

            for (int i = 0; i <= nIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif

                data_.push_back(cpui);
            }

            // Capture vendor string
            char vendor[0x20];
            memset(vendor, 0, sizeof(vendor));
            *reinterpret_cast<int*>(vendor + 0) = data_[0][1];
            *reinterpret_cast<int*>(vendor + 4) = data_[0][3];
            *reinterpret_cast<int*>(vendor + 8) = data_[0][2];
            vendor_ = vendor;
            if (vendor_ == "GenuineIntel")
            {
                isIntel_ = true;
            }
            else if (vendor_ == "AuthenticAMD")
            {
                isAMD_ = true;
            }

            // load bitset with flags for function 0x00000001
            if (nIds_ >= 1)
            {
                f_1_ECX_ = data_[1][2];
                f_1_EDX_ = data_[1][3];
            }

            // load bitset with flags for function 0x00000007
            if (nIds_ >= 7)
            {
                f_7_EBX_ = data_[7][1];
                f_7_ECX_ = data_[7][2];
            }

            // Calling __cpuid with 0x80000000 as the function_id argument
            // gets the number of the highest valid extended ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0x80000000);
#else
            __cpuid(0x80000000, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
            nExIds_ = cpui[0];

            char brand[0x40];
            memset(brand, 0, sizeof(brand));

            for (int i = 0x80000000; i <= nExIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
                extdata_.push_back(cpui);
            }

            // load bitset with flags for function 0x80000001
            if ((unsigned)nExIds_ >= 0x80000001)
            {
                f_81_ECX_ = extdata_[1][2];
                f_81_EDX_ = extdata_[1][3];
            }

            // Interpret CPU brand string if reported
            if ((unsigned)nExIds_ >= 0x80000004)
            {
                memcpy(brand +  0, extdata_[2].data(), sizeof(cpui));
                memcpy(brand + 16, extdata_[3].data(), sizeof(cpui));
                memcpy(brand + 32, extdata_[4].data(), sizeof(cpui));
                brand_ = brand;
            }
        };

        int nIds_;
        int nExIds_;
        std::string vendor_;
        std::string brand_;
        bool isIntel_;
        bool isAMD_;
        std::bitset<32> f_1_ECX_;
        std::bitset<32> f_1_EDX_;
        std::bitset<32> f_7_EBX_;
        std::bitset<32> f_7_ECX_;
        std::bitset<32> f_81_ECX_;
        std::bitset<32> f_81_EDX_;
#ifdef WIN32
        std::vector<std::array<int, 4>> data_;
        std::vector<std::array<int, 4>> extdata_;
#else
        std::vector<std::array<unsigned int, 4>> data_;
        std::vector<std::array<unsigned int, 4>> extdata_;
#endif
    };
};

// Initialize static member data
const InstructionSet::InstructionSet_Internal InstructionSet::CPU_Rep;

// Print out supported instruction set extensions
int main()
{
    std::ofstream fo("/opt/sample_release/inference_engine_samples_build/cpuid.txt");
    auto& outstream = fo;//std::cout;

    auto support_message = [&outstream](std::string isa_feature, bool is_supported) {
        outstream << isa_feature << (is_supported ? " supported" : " not supported") << std::endl;
    };

    std::cout << InstructionSet::Vendor() << std::endl;
    std::cout << InstructionSet::Brand() << std::endl;

    support_message("3DNOW",       InstructionSet::_3DNOW());
    support_message("3DNOWEXT",    InstructionSet::_3DNOWEXT());
    support_message("ABM",         InstructionSet::ABM());
    support_message("ADX",         InstructionSet::ADX());
    support_message("AES",         InstructionSet::AES());
    support_message("AVX",         InstructionSet::AVX());
    support_message("AVX2",        InstructionSet::AVX2());
    support_message("AVX512CD",    InstructionSet::AVX512CD());
    support_message("AVX512F",     InstructionSet::AVX512F());
    support_message("AVX512ER",    InstructionSet::AVX512ER());
    support_message("AVX512PF",    InstructionSet::AVX512PF());
    support_message("BMI1",        InstructionSet::BMI1());
    support_message("BMI2",        InstructionSet::BMI2());
    support_message("CLFSH",       InstructionSet::CLFSH());
    support_message("CMPXCHG16B",  InstructionSet::CMPXCHG16B());
    support_message("CX8",         InstructionSet::CX8());
    support_message("ERMS",        InstructionSet::ERMS());
    support_message("F16C",        InstructionSet::F16C());
    support_message("FMA",         InstructionSet::FMA());
    support_message("FSGSBASE",    InstructionSet::FSGSBASE());
    support_message("FXSR",        InstructionSet::FXSR());
    support_message("HLE",         InstructionSet::HLE());
    support_message("INVPCID",     InstructionSet::INVPCID());
    support_message("LAHF",        InstructionSet::LAHF());
    support_message("LZCNT",       InstructionSet::LZCNT());
    support_message("MMX",         InstructionSet::MMX());
    support_message("MMXEXT",      InstructionSet::MMXEXT());
    support_message("MONITOR",     InstructionSet::MONITOR());
    support_message("MOVBE",       InstructionSet::MOVBE());
    support_message("MSR",         InstructionSet::MSR());
    support_message("OSXSAVE",     InstructionSet::OSXSAVE());
    support_message("PCLMULQDQ",   InstructionSet::PCLMULQDQ());
    support_message("POPCNT",      InstructionSet::POPCNT());
    support_message("PREFETCHWT1", InstructionSet::PREFETCHWT1());
    support_message("RDRAND",      InstructionSet::RDRAND());
    support_message("RDSEED",      InstructionSet::RDSEED());
    support_message("RDTSCP",      InstructionSet::RDTSCP());
    support_message("RTM",         InstructionSet::RTM());
    support_message("SEP",         InstructionSet::SEP());
    support_message("SHA",         InstructionSet::SHA());
    support_message("SSE",         InstructionSet::SSE());
    support_message("SSE2",        InstructionSet::SSE2());
    support_message("SSE3",        InstructionSet::SSE3());
    support_message("SSE4.1",      InstructionSet::SSE41());
    support_message("SSE4.2",      InstructionSet::SSE42());
    support_message("SSE4a",       InstructionSet::SSE4a());
    support_message("SSSE3",       InstructionSet::SSSE3());
    support_message("SYSCALL",     InstructionSet::SYSCALL());
    support_message("TBM",         InstructionSet::TBM());
    support_message("XOP",         InstructionSet::XOP());
    support_message("XSAVE",       InstructionSet::XSAVE());
    return 0;
}

Determining if the include file pthread.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_3e8a9/fast"
/usr/bin/make -f CMakeFiles/cmTC_3e8a9.dir/build.make CMakeFiles/cmTC_3e8a9.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_3e8a9.dir/CheckIncludeFile.c.o
/usr/bin/cc    -std=c++11   -o CMakeFiles/cmTC_3e8a9.dir/CheckIncludeFile.c.o   -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_3e8a9
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_3e8a9.dir/link.txt --verbose=1
/usr/bin/cc   -std=c++11    CMakeFiles/cmTC_3e8a9.dir/CheckIncludeFile.c.o  -o cmTC_3e8a9 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the function pthread_create exists in the pthread passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_6772f/fast"
/usr/bin/make -f CMakeFiles/cmTC_6772f.dir/build.make CMakeFiles/cmTC_6772f.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_6772f.dir/CheckFunctionExists.c.o
/usr/bin/cc    -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11   -o CMakeFiles/cmTC_6772f.dir/CheckFunctionExists.c.o   -c /usr/share/cmake-3.5/Modules/CheckFunctionExists.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_6772f
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_6772f.dir/link.txt --verbose=1
/usr/bin/cc   -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11    CMakeFiles/cmTC_6772f.dir/CheckFunctionExists.c.o  -o cmTC_6772f -rdynamic -lpthread 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file unistd.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_b26b6/fast"
/usr/bin/make -f CMakeFiles/cmTC_b26b6.dir/build.make CMakeFiles/cmTC_b26b6.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_b26b6.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_b26b6.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_b26b6
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_b26b6.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_b26b6.dir/CheckIncludeFile.cxx.o  -o cmTC_b26b6 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stdint.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_d0ff8/fast"
/usr/bin/make -f CMakeFiles/cmTC_d0ff8.dir/build.make CMakeFiles/cmTC_d0ff8.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_d0ff8.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_d0ff8.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_d0ff8
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_d0ff8.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_d0ff8.dir/CheckIncludeFile.cxx.o  -o cmTC_d0ff8 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file sys/types.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_5bda7/fast"
/usr/bin/make -f CMakeFiles/cmTC_5bda7.dir/build.make CMakeFiles/cmTC_5bda7.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_5bda7.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_5bda7.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_5bda7
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5bda7.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_5bda7.dir/CheckIncludeFile.cxx.o  -o cmTC_5bda7 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file fnmatch.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_5c87b/fast"
/usr/bin/make -f CMakeFiles/cmTC_5c87b.dir/build.make CMakeFiles/cmTC_5c87b.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_5c87b.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_5c87b.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_5c87b
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5c87b.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_5c87b.dir/CheckIncludeFile.cxx.o  -o cmTC_5c87b -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stddef.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_70882/fast"
/usr/bin/make -f CMakeFiles/cmTC_70882.dir/build.make CMakeFiles/cmTC_70882.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_70882.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_70882.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_70882
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_70882.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_70882.dir/CheckIncludeFile.cxx.o  -o cmTC_70882 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining size of uint32_t passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_00197/fast"
/usr/bin/make -f CMakeFiles/cmTC_00197.dir/build.make CMakeFiles/cmTC_00197.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_00197.dir/uint32_t.cpp.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_00197.dir/uint32_t.cpp.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CheckTypeSize/uint32_t.cpp
Linking CXX executable cmTC_00197
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_00197.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_00197.dir/uint32_t.cpp.o  -o cmTC_00197 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the strtoll exist passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_28520/fast"
/usr/bin/make -f CMakeFiles/cmTC_28520.dir/build.make CMakeFiles/cmTC_28520.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_28520.dir/CheckSymbolExists.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_28520.dir/CheckSymbolExists.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx
Linking CXX executable cmTC_28520
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_28520.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_28520.dir/CheckSymbolExists.cxx.o  -o cmTC_28520 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

File /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx:
/* */
#include <stdlib.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strtoll
  return ((int*)(&strtoll))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Performing C++ SOURCE FILE Test HAVE_CPUID_INFO succeeded with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_6513f/fast"
/usr/bin/make -f CMakeFiles/cmTC_6513f.dir/build.make CMakeFiles/cmTC_6513f.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_6513f.dir/src.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11   -o CMakeFiles/cmTC_6513f.dir/src.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/src.cxx
Linking CXX executable cmTC_6513f
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_6513f.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11    CMakeFiles/cmTC_6513f.dir/src.cxx.o  -o cmTC_6513f -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

Return value: 1
Source file was:

// InstructionSet.cpp
// Compile by using: cl /EHsc /W4 InstructionSet.cpp
// processor: x86, x64
// Uses the __cpuid intrinsic to get information about
// CPU extended instruction set support.
//
// source origin:
// https://msdn.microsoft.com/en-us/library/hskdteyh.aspx
// https://gcc.gnu.org/git/?p=gcc.git;a=blob_plain;f=gcc/config/i386/driver-i386.c


#include <iostream>
#include <fstream>
#include <vector>
#include <bitset>
#include <array>
#include <string>
#ifdef WIN32
#include <intrin.h>
#else
#include <cpuid.h>
#include <string.h>
#endif

class InstructionSet
{
    // forward declarations
    class InstructionSet_Internal;

public:
    // getters
    static std::string Vendor(void) { return CPU_Rep.vendor_; }
    static std::string Brand(void) { return CPU_Rep.brand_; }

    static bool SSE3(void) { return CPU_Rep.f_1_ECX_[0]; }
    static bool PCLMULQDQ(void) { return CPU_Rep.f_1_ECX_[1]; }
    static bool MONITOR(void) { return CPU_Rep.f_1_ECX_[3]; }
    static bool SSSE3(void) { return CPU_Rep.f_1_ECX_[9]; }
    static bool FMA(void) { return CPU_Rep.f_1_ECX_[12]; }
    static bool CMPXCHG16B(void) { return CPU_Rep.f_1_ECX_[13]; }
    static bool SSE41(void) { return CPU_Rep.f_1_ECX_[19]; }
    static bool SSE42(void) { return CPU_Rep.f_1_ECX_[20]; }
    static bool MOVBE(void) { return CPU_Rep.f_1_ECX_[22]; }
    static bool POPCNT(void) { return CPU_Rep.f_1_ECX_[23]; }
    static bool AES(void) { return CPU_Rep.f_1_ECX_[25]; }
    static bool XSAVE(void) { return CPU_Rep.f_1_ECX_[26]; }
    static bool OSXSAVE(void) { return CPU_Rep.f_1_ECX_[27]; }
    static bool AVX(void) { return CPU_Rep.f_1_ECX_[28]; }
    static bool F16C(void) { return CPU_Rep.f_1_ECX_[29]; }
    static bool RDRAND(void) { return CPU_Rep.f_1_ECX_[30]; }

    static bool MSR(void) { return CPU_Rep.f_1_EDX_[5]; }
    static bool CX8(void) { return CPU_Rep.f_1_EDX_[8]; }
    static bool SEP(void) { return CPU_Rep.f_1_EDX_[11]; }
    static bool CMOV(void) { return CPU_Rep.f_1_EDX_[15]; }
    static bool CLFSH(void) { return CPU_Rep.f_1_EDX_[19]; }
    static bool MMX(void) { return CPU_Rep.f_1_EDX_[23]; }
    static bool FXSR(void) { return CPU_Rep.f_1_EDX_[24]; }
    static bool SSE(void) { return CPU_Rep.f_1_EDX_[25]; }
    static bool SSE2(void) { return CPU_Rep.f_1_EDX_[26]; }

    static bool FSGSBASE(void) { return CPU_Rep.f_7_EBX_[0]; }
    static bool BMI1(void) { return CPU_Rep.f_7_EBX_[3]; }
    static bool HLE(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[4]; }
    static bool AVX2(void) { return CPU_Rep.f_7_EBX_[5]; }
    static bool BMI2(void) { return CPU_Rep.f_7_EBX_[8]; }
    static bool ERMS(void) { return CPU_Rep.f_7_EBX_[9]; }
    static bool INVPCID(void) { return CPU_Rep.f_7_EBX_[10]; }
    static bool RTM(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[11]; }
    static bool AVX512F(void) { return CPU_Rep.f_7_EBX_[16]; }
    static bool RDSEED(void) { return CPU_Rep.f_7_EBX_[18]; }
    static bool ADX(void) { return CPU_Rep.f_7_EBX_[19]; }
    static bool AVX512PF(void) { return CPU_Rep.f_7_EBX_[26]; }
    static bool AVX512ER(void) { return CPU_Rep.f_7_EBX_[27]; }
    static bool AVX512CD(void) { return CPU_Rep.f_7_EBX_[28]; }
    static bool SHA(void) { return CPU_Rep.f_7_EBX_[29]; }

    static bool PREFETCHWT1(void) { return CPU_Rep.f_7_ECX_[0]; }

    static bool LAHF(void) { return CPU_Rep.f_81_ECX_[0]; }
    static bool LZCNT(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_ECX_[5]; }
    static bool ABM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[5]; }
    static bool SSE4a(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[6]; }
    static bool XOP(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[11]; }
    static bool TBM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[21]; }

    static bool SYSCALL(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[11]; }
    static bool MMXEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[22]; }
    static bool RDTSCP(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[27]; }
    static bool _3DNOWEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[30]; }
    static bool _3DNOW(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[31]; }

private:
    static const InstructionSet_Internal CPU_Rep;

    class InstructionSet_Internal
    {
    public:
        InstructionSet_Internal()
            : nIds_{ 0 },
            nExIds_{ 0 },
            isIntel_{ false },
            isAMD_{ false },
            f_1_ECX_{ 0 },
            f_1_EDX_{ 0 },
            f_7_EBX_{ 0 },
            f_7_ECX_{ 0 },
            f_81_ECX_{ 0 },
            f_81_EDX_{ 0 },
            data_{},
            extdata_{}
        {
#ifdef WIN32
            std::array<int, 4> cpui;
#else
            std::array<unsigned int, 4> cpui;
#endif

            // Calling __cpuid with 0x0 as the function_id argument
            // gets the number of the highest valid function ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0);
#else
            cpui[0] = __get_cpuid_max(0, &cpui[1]);
#endif
            nIds_ = cpui[0];

            for (int i = 0; i <= nIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif

                data_.push_back(cpui);
            }

            // Capture vendor string
            char vendor[0x20];
            memset(vendor, 0, sizeof(vendor));
            *reinterpret_cast<int*>(vendor + 0) = data_[0][1];
            *reinterpret_cast<int*>(vendor + 4) = data_[0][3];
            *reinterpret_cast<int*>(vendor + 8) = data_[0][2];
            vendor_ = vendor;
            if (vendor_ == "GenuineIntel")
            {
                isIntel_ = true;
            }
            else if (vendor_ == "AuthenticAMD")
            {
                isAMD_ = true;
            }

            // load bitset with flags for function 0x00000001
            if (nIds_ >= 1)
            {
                f_1_ECX_ = data_[1][2];
                f_1_EDX_ = data_[1][3];
            }

            // load bitset with flags for function 0x00000007
            if (nIds_ >= 7)
            {
                f_7_EBX_ = data_[7][1];
                f_7_ECX_ = data_[7][2];
            }

            // Calling __cpuid with 0x80000000 as the function_id argument
            // gets the number of the highest valid extended ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0x80000000);
#else
            __cpuid(0x80000000, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
            nExIds_ = cpui[0];

            char brand[0x40];
            memset(brand, 0, sizeof(brand));

            for (int i = 0x80000000; i <= nExIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
                extdata_.push_back(cpui);
            }

            // load bitset with flags for function 0x80000001
            if ((unsigned)nExIds_ >= 0x80000001)
            {
                f_81_ECX_ = extdata_[1][2];
                f_81_EDX_ = extdata_[1][3];
            }

            // Interpret CPU brand string if reported
            if ((unsigned)nExIds_ >= 0x80000004)
            {
                memcpy(brand +  0, extdata_[2].data(), sizeof(cpui));
                memcpy(brand + 16, extdata_[3].data(), sizeof(cpui));
                memcpy(brand + 32, extdata_[4].data(), sizeof(cpui));
                brand_ = brand;
            }
        };

        int nIds_;
        int nExIds_;
        std::string vendor_;
        std::string brand_;
        bool isIntel_;
        bool isAMD_;
        std::bitset<32> f_1_ECX_;
        std::bitset<32> f_1_EDX_;
        std::bitset<32> f_7_EBX_;
        std::bitset<32> f_7_ECX_;
        std::bitset<32> f_81_ECX_;
        std::bitset<32> f_81_EDX_;
#ifdef WIN32
        std::vector<std::array<int, 4>> data_;
        std::vector<std::array<int, 4>> extdata_;
#else
        std::vector<std::array<unsigned int, 4>> data_;
        std::vector<std::array<unsigned int, 4>> extdata_;
#endif
    };
};

// Initialize static member data
const InstructionSet::InstructionSet_Internal InstructionSet::CPU_Rep;

// Print out supported instruction set extensions
int main()
{
    std::ofstream fo("/opt/sample_release/inference_engine_samples_build/cpuid.txt");
    auto& outstream = fo;//std::cout;

    auto support_message = [&outstream](std::string isa_feature, bool is_supported) {
        outstream << isa_feature << (is_supported ? " supported" : " not supported") << std::endl;
    };

    std::cout << InstructionSet::Vendor() << std::endl;
    std::cout << InstructionSet::Brand() << std::endl;

    support_message("3DNOW",       InstructionSet::_3DNOW());
    support_message("3DNOWEXT",    InstructionSet::_3DNOWEXT());
    support_message("ABM",         InstructionSet::ABM());
    support_message("ADX",         InstructionSet::ADX());
    support_message("AES",         InstructionSet::AES());
    support_message("AVX",         InstructionSet::AVX());
    support_message("AVX2",        InstructionSet::AVX2());
    support_message("AVX512CD",    InstructionSet::AVX512CD());
    support_message("AVX512F",     InstructionSet::AVX512F());
    support_message("AVX512ER",    InstructionSet::AVX512ER());
    support_message("AVX512PF",    InstructionSet::AVX512PF());
    support_message("BMI1",        InstructionSet::BMI1());
    support_message("BMI2",        InstructionSet::BMI2());
    support_message("CLFSH",       InstructionSet::CLFSH());
    support_message("CMPXCHG16B",  InstructionSet::CMPXCHG16B());
    support_message("CX8",         InstructionSet::CX8());
    support_message("ERMS",        InstructionSet::ERMS());
    support_message("F16C",        InstructionSet::F16C());
    support_message("FMA",         InstructionSet::FMA());
    support_message("FSGSBASE",    InstructionSet::FSGSBASE());
    support_message("FXSR",        InstructionSet::FXSR());
    support_message("HLE",         InstructionSet::HLE());
    support_message("INVPCID",     InstructionSet::INVPCID());
    support_message("LAHF",        InstructionSet::LAHF());
    support_message("LZCNT",       InstructionSet::LZCNT());
    support_message("MMX",         InstructionSet::MMX());
    support_message("MMXEXT",      InstructionSet::MMXEXT());
    support_message("MONITOR",     InstructionSet::MONITOR());
    support_message("MOVBE",       InstructionSet::MOVBE());
    support_message("MSR",         InstructionSet::MSR());
    support_message("OSXSAVE",     InstructionSet::OSXSAVE());
    support_message("PCLMULQDQ",   InstructionSet::PCLMULQDQ());
    support_message("POPCNT",      InstructionSet::POPCNT());
    support_message("PREFETCHWT1", InstructionSet::PREFETCHWT1());
    support_message("RDRAND",      InstructionSet::RDRAND());
    support_message("RDSEED",      InstructionSet::RDSEED());
    support_message("RDTSCP",      InstructionSet::RDTSCP());
    support_message("RTM",         InstructionSet::RTM());
    support_message("SEP",         InstructionSet::SEP());
    support_message("SHA",         InstructionSet::SHA());
    support_message("SSE",         InstructionSet::SSE());
    support_message("SSE2",        InstructionSet::SSE2());
    support_message("SSE3",        InstructionSet::SSE3());
    support_message("SSE4.1",      InstructionSet::SSE41());
    support_message("SSE4.2",      InstructionSet::SSE42());
    support_message("SSE4a",       InstructionSet::SSE4a());
    support_message("SSSE3",       InstructionSet::SSSE3());
    support_message("SYSCALL",     InstructionSet::SYSCALL());
    support_message("TBM",         InstructionSet::TBM());
    support_message("XOP",         InstructionSet::XOP());
    support_message("XSAVE",       InstructionSet::XSAVE());
    return 0;
}

Determining if the include file pthread.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_00784/fast"
/usr/bin/make -f CMakeFiles/cmTC_00784.dir/build.make CMakeFiles/cmTC_00784.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_00784.dir/CheckIncludeFile.c.o
/usr/bin/cc    -std=c++11   -o CMakeFiles/cmTC_00784.dir/CheckIncludeFile.c.o   -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_00784
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_00784.dir/link.txt --verbose=1
/usr/bin/cc   -std=c++11    CMakeFiles/cmTC_00784.dir/CheckIncludeFile.c.o  -o cmTC_00784 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the function pthread_create exists in the pthread passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_45aff/fast"
/usr/bin/make -f CMakeFiles/cmTC_45aff.dir/build.make CMakeFiles/cmTC_45aff.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_45aff.dir/CheckFunctionExists.c.o
/usr/bin/cc    -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11   -o CMakeFiles/cmTC_45aff.dir/CheckFunctionExists.c.o   -c /usr/share/cmake-3.5/Modules/CheckFunctionExists.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_45aff
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_45aff.dir/link.txt --verbose=1
/usr/bin/cc   -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11    CMakeFiles/cmTC_45aff.dir/CheckFunctionExists.c.o  -o cmTC_45aff -rdynamic -lpthread 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file unistd.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_596c5/fast"
/usr/bin/make -f CMakeFiles/cmTC_596c5.dir/build.make CMakeFiles/cmTC_596c5.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_596c5.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_596c5.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_596c5
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_596c5.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_596c5.dir/CheckIncludeFile.cxx.o  -o cmTC_596c5 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stdint.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_39f7e/fast"
/usr/bin/make -f CMakeFiles/cmTC_39f7e.dir/build.make CMakeFiles/cmTC_39f7e.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_39f7e.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_39f7e.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_39f7e
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_39f7e.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_39f7e.dir/CheckIncludeFile.cxx.o  -o cmTC_39f7e -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file sys/types.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_84fde/fast"
/usr/bin/make -f CMakeFiles/cmTC_84fde.dir/build.make CMakeFiles/cmTC_84fde.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_84fde.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_84fde.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_84fde
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_84fde.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_84fde.dir/CheckIncludeFile.cxx.o  -o cmTC_84fde -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file fnmatch.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_fef61/fast"
/usr/bin/make -f CMakeFiles/cmTC_fef61.dir/build.make CMakeFiles/cmTC_fef61.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_fef61.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_fef61.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_fef61
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_fef61.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_fef61.dir/CheckIncludeFile.cxx.o  -o cmTC_fef61 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stddef.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_ed3f2/fast"
/usr/bin/make -f CMakeFiles/cmTC_ed3f2.dir/build.make CMakeFiles/cmTC_ed3f2.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_ed3f2.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_ed3f2.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_ed3f2
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_ed3f2.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_ed3f2.dir/CheckIncludeFile.cxx.o  -o cmTC_ed3f2 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining size of uint32_t passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_4cce9/fast"
/usr/bin/make -f CMakeFiles/cmTC_4cce9.dir/build.make CMakeFiles/cmTC_4cce9.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_4cce9.dir/uint32_t.cpp.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_4cce9.dir/uint32_t.cpp.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CheckTypeSize/uint32_t.cpp
Linking CXX executable cmTC_4cce9
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_4cce9.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_4cce9.dir/uint32_t.cpp.o  -o cmTC_4cce9 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the strtoll exist passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_4414d/fast"
/usr/bin/make -f CMakeFiles/cmTC_4414d.dir/build.make CMakeFiles/cmTC_4414d.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_4414d.dir/CheckSymbolExists.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_4414d.dir/CheckSymbolExists.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx
Linking CXX executable cmTC_4414d
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_4414d.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_4414d.dir/CheckSymbolExists.cxx.o  -o cmTC_4414d -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

File /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx:
/* */
#include <stdlib.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strtoll
  return ((int*)(&strtoll))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Performing C++ SOURCE FILE Test HAVE_CPUID_INFO succeeded with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_d42cc/fast"
/usr/bin/make -f CMakeFiles/cmTC_d42cc.dir/build.make CMakeFiles/cmTC_d42cc.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_d42cc.dir/src.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11   -o CMakeFiles/cmTC_d42cc.dir/src.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/src.cxx
Linking CXX executable cmTC_d42cc
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_d42cc.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11    CMakeFiles/cmTC_d42cc.dir/src.cxx.o  -o cmTC_d42cc -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

Return value: 1
Source file was:

// InstructionSet.cpp
// Compile by using: cl /EHsc /W4 InstructionSet.cpp
// processor: x86, x64
// Uses the __cpuid intrinsic to get information about
// CPU extended instruction set support.
//
// source origin:
// https://msdn.microsoft.com/en-us/library/hskdteyh.aspx
// https://gcc.gnu.org/git/?p=gcc.git;a=blob_plain;f=gcc/config/i386/driver-i386.c


#include <iostream>
#include <fstream>
#include <vector>
#include <bitset>
#include <array>
#include <string>
#ifdef WIN32
#include <intrin.h>
#else
#include <cpuid.h>
#include <string.h>
#endif

class InstructionSet
{
    // forward declarations
    class InstructionSet_Internal;

public:
    // getters
    static std::string Vendor(void) { return CPU_Rep.vendor_; }
    static std::string Brand(void) { return CPU_Rep.brand_; }

    static bool SSE3(void) { return CPU_Rep.f_1_ECX_[0]; }
    static bool PCLMULQDQ(void) { return CPU_Rep.f_1_ECX_[1]; }
    static bool MONITOR(void) { return CPU_Rep.f_1_ECX_[3]; }
    static bool SSSE3(void) { return CPU_Rep.f_1_ECX_[9]; }
    static bool FMA(void) { return CPU_Rep.f_1_ECX_[12]; }
    static bool CMPXCHG16B(void) { return CPU_Rep.f_1_ECX_[13]; }
    static bool SSE41(void) { return CPU_Rep.f_1_ECX_[19]; }
    static bool SSE42(void) { return CPU_Rep.f_1_ECX_[20]; }
    static bool MOVBE(void) { return CPU_Rep.f_1_ECX_[22]; }
    static bool POPCNT(void) { return CPU_Rep.f_1_ECX_[23]; }
    static bool AES(void) { return CPU_Rep.f_1_ECX_[25]; }
    static bool XSAVE(void) { return CPU_Rep.f_1_ECX_[26]; }
    static bool OSXSAVE(void) { return CPU_Rep.f_1_ECX_[27]; }
    static bool AVX(void) { return CPU_Rep.f_1_ECX_[28]; }
    static bool F16C(void) { return CPU_Rep.f_1_ECX_[29]; }
    static bool RDRAND(void) { return CPU_Rep.f_1_ECX_[30]; }

    static bool MSR(void) { return CPU_Rep.f_1_EDX_[5]; }
    static bool CX8(void) { return CPU_Rep.f_1_EDX_[8]; }
    static bool SEP(void) { return CPU_Rep.f_1_EDX_[11]; }
    static bool CMOV(void) { return CPU_Rep.f_1_EDX_[15]; }
    static bool CLFSH(void) { return CPU_Rep.f_1_EDX_[19]; }
    static bool MMX(void) { return CPU_Rep.f_1_EDX_[23]; }
    static bool FXSR(void) { return CPU_Rep.f_1_EDX_[24]; }
    static bool SSE(void) { return CPU_Rep.f_1_EDX_[25]; }
    static bool SSE2(void) { return CPU_Rep.f_1_EDX_[26]; }

    static bool FSGSBASE(void) { return CPU_Rep.f_7_EBX_[0]; }
    static bool BMI1(void) { return CPU_Rep.f_7_EBX_[3]; }
    static bool HLE(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[4]; }
    static bool AVX2(void) { return CPU_Rep.f_7_EBX_[5]; }
    static bool BMI2(void) { return CPU_Rep.f_7_EBX_[8]; }
    static bool ERMS(void) { return CPU_Rep.f_7_EBX_[9]; }
    static bool INVPCID(void) { return CPU_Rep.f_7_EBX_[10]; }
    static bool RTM(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[11]; }
    static bool AVX512F(void) { return CPU_Rep.f_7_EBX_[16]; }
    static bool RDSEED(void) { return CPU_Rep.f_7_EBX_[18]; }
    static bool ADX(void) { return CPU_Rep.f_7_EBX_[19]; }
    static bool AVX512PF(void) { return CPU_Rep.f_7_EBX_[26]; }
    static bool AVX512ER(void) { return CPU_Rep.f_7_EBX_[27]; }
    static bool AVX512CD(void) { return CPU_Rep.f_7_EBX_[28]; }
    static bool SHA(void) { return CPU_Rep.f_7_EBX_[29]; }

    static bool PREFETCHWT1(void) { return CPU_Rep.f_7_ECX_[0]; }

    static bool LAHF(void) { return CPU_Rep.f_81_ECX_[0]; }
    static bool LZCNT(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_ECX_[5]; }
    static bool ABM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[5]; }
    static bool SSE4a(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[6]; }
    static bool XOP(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[11]; }
    static bool TBM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[21]; }

    static bool SYSCALL(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[11]; }
    static bool MMXEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[22]; }
    static bool RDTSCP(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[27]; }
    static bool _3DNOWEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[30]; }
    static bool _3DNOW(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[31]; }

private:
    static const InstructionSet_Internal CPU_Rep;

    class InstructionSet_Internal
    {
    public:
        InstructionSet_Internal()
            : nIds_{ 0 },
            nExIds_{ 0 },
            isIntel_{ false },
            isAMD_{ false },
            f_1_ECX_{ 0 },
            f_1_EDX_{ 0 },
            f_7_EBX_{ 0 },
            f_7_ECX_{ 0 },
            f_81_ECX_{ 0 },
            f_81_EDX_{ 0 },
            data_{},
            extdata_{}
        {
#ifdef WIN32
            std::array<int, 4> cpui;
#else
            std::array<unsigned int, 4> cpui;
#endif

            // Calling __cpuid with 0x0 as the function_id argument
            // gets the number of the highest valid function ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0);
#else
            cpui[0] = __get_cpuid_max(0, &cpui[1]);
#endif
            nIds_ = cpui[0];

            for (int i = 0; i <= nIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif

                data_.push_back(cpui);
            }

            // Capture vendor string
            char vendor[0x20];
            memset(vendor, 0, sizeof(vendor));
            *reinterpret_cast<int*>(vendor + 0) = data_[0][1];
            *reinterpret_cast<int*>(vendor + 4) = data_[0][3];
            *reinterpret_cast<int*>(vendor + 8) = data_[0][2];
            vendor_ = vendor;
            if (vendor_ == "GenuineIntel")
            {
                isIntel_ = true;
            }
            else if (vendor_ == "AuthenticAMD")
            {
                isAMD_ = true;
            }

            // load bitset with flags for function 0x00000001
            if (nIds_ >= 1)
            {
                f_1_ECX_ = data_[1][2];
                f_1_EDX_ = data_[1][3];
            }

            // load bitset with flags for function 0x00000007
            if (nIds_ >= 7)
            {
                f_7_EBX_ = data_[7][1];
                f_7_ECX_ = data_[7][2];
            }

            // Calling __cpuid with 0x80000000 as the function_id argument
            // gets the number of the highest valid extended ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0x80000000);
#else
            __cpuid(0x80000000, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
            nExIds_ = cpui[0];

            char brand[0x40];
            memset(brand, 0, sizeof(brand));

            for (int i = 0x80000000; i <= nExIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
                extdata_.push_back(cpui);
            }

            // load bitset with flags for function 0x80000001
            if ((unsigned)nExIds_ >= 0x80000001)
            {
                f_81_ECX_ = extdata_[1][2];
                f_81_EDX_ = extdata_[1][3];
            }

            // Interpret CPU brand string if reported
            if ((unsigned)nExIds_ >= 0x80000004)
            {
                memcpy(brand +  0, extdata_[2].data(), sizeof(cpui));
                memcpy(brand + 16, extdata_[3].data(), sizeof(cpui));
                memcpy(brand + 32, extdata_[4].data(), sizeof(cpui));
                brand_ = brand;
            }
        };

        int nIds_;
        int nExIds_;
        std::string vendor_;
        std::string brand_;
        bool isIntel_;
        bool isAMD_;
        std::bitset<32> f_1_ECX_;
        std::bitset<32> f_1_EDX_;
        std::bitset<32> f_7_EBX_;
        std::bitset<32> f_7_ECX_;
        std::bitset<32> f_81_ECX_;
        std::bitset<32> f_81_EDX_;
#ifdef WIN32
        std::vector<std::array<int, 4>> data_;
        std::vector<std::array<int, 4>> extdata_;
#else
        std::vector<std::array<unsigned int, 4>> data_;
        std::vector<std::array<unsigned int, 4>> extdata_;
#endif
    };
};

// Initialize static member data
const InstructionSet::InstructionSet_Internal InstructionSet::CPU_Rep;

// Print out supported instruction set extensions
int main()
{
    std::ofstream fo("/opt/sample_release/inference_engine_samples_build/cpuid.txt");
    auto& outstream = fo;//std::cout;

    auto support_message = [&outstream](std::string isa_feature, bool is_supported) {
        outstream << isa_feature << (is_supported ? " supported" : " not supported") << std::endl;
    };

    std::cout << InstructionSet::Vendor() << std::endl;
    std::cout << InstructionSet::Brand() << std::endl;

    support_message("3DNOW",       InstructionSet::_3DNOW());
    support_message("3DNOWEXT",    InstructionSet::_3DNOWEXT());
    support_message("ABM",         InstructionSet::ABM());
    support_message("ADX",         InstructionSet::ADX());
    support_message("AES",         InstructionSet::AES());
    support_message("AVX",         InstructionSet::AVX());
    support_message("AVX2",        InstructionSet::AVX2());
    support_message("AVX512CD",    InstructionSet::AVX512CD());
    support_message("AVX512F",     InstructionSet::AVX512F());
    support_message("AVX512ER",    InstructionSet::AVX512ER());
    support_message("AVX512PF",    InstructionSet::AVX512PF());
    support_message("BMI1",        InstructionSet::BMI1());
    support_message("BMI2",        InstructionSet::BMI2());
    support_message("CLFSH",       InstructionSet::CLFSH());
    support_message("CMPXCHG16B",  InstructionSet::CMPXCHG16B());
    support_message("CX8",         InstructionSet::CX8());
    support_message("ERMS",        InstructionSet::ERMS());
    support_message("F16C",        InstructionSet::F16C());
    support_message("FMA",         InstructionSet::FMA());
    support_message("FSGSBASE",    InstructionSet::FSGSBASE());
    support_message("FXSR",        InstructionSet::FXSR());
    support_message("HLE",         InstructionSet::HLE());
    support_message("INVPCID",     InstructionSet::INVPCID());
    support_message("LAHF",        InstructionSet::LAHF());
    support_message("LZCNT",       InstructionSet::LZCNT());
    support_message("MMX",         InstructionSet::MMX());
    support_message("MMXEXT",      InstructionSet::MMXEXT());
    support_message("MONITOR",     InstructionSet::MONITOR());
    support_message("MOVBE",       InstructionSet::MOVBE());
    support_message("MSR",         InstructionSet::MSR());
    support_message("OSXSAVE",     InstructionSet::OSXSAVE());
    support_message("PCLMULQDQ",   InstructionSet::PCLMULQDQ());
    support_message("POPCNT",      InstructionSet::POPCNT());
    support_message("PREFETCHWT1", InstructionSet::PREFETCHWT1());
    support_message("RDRAND",      InstructionSet::RDRAND());
    support_message("RDSEED",      InstructionSet::RDSEED());
    support_message("RDTSCP",      InstructionSet::RDTSCP());
    support_message("RTM",         InstructionSet::RTM());
    support_message("SEP",         InstructionSet::SEP());
    support_message("SHA",         InstructionSet::SHA());
    support_message("SSE",         InstructionSet::SSE());
    support_message("SSE2",        InstructionSet::SSE2());
    support_message("SSE3",        InstructionSet::SSE3());
    support_message("SSE4.1",      InstructionSet::SSE41());
    support_message("SSE4.2",      InstructionSet::SSE42());
    support_message("SSE4a",       InstructionSet::SSE4a());
    support_message("SSSE3",       InstructionSet::SSSE3());
    support_message("SYSCALL",     InstructionSet::SYSCALL());
    support_message("TBM",         InstructionSet::TBM());
    support_message("XOP",         InstructionSet::XOP());
    support_message("XSAVE",       InstructionSet::XSAVE());
    return 0;
}

Determining if the include file pthread.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_552b2/fast"
/usr/bin/make -f CMakeFiles/cmTC_552b2.dir/build.make CMakeFiles/cmTC_552b2.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_552b2.dir/CheckIncludeFile.c.o
/usr/bin/cc    -std=c++11   -o CMakeFiles/cmTC_552b2.dir/CheckIncludeFile.c.o   -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_552b2
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_552b2.dir/link.txt --verbose=1
/usr/bin/cc   -std=c++11    CMakeFiles/cmTC_552b2.dir/CheckIncludeFile.c.o  -o cmTC_552b2 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the function pthread_create exists in the pthread passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_60a71/fast"
/usr/bin/make -f CMakeFiles/cmTC_60a71.dir/build.make CMakeFiles/cmTC_60a71.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_60a71.dir/CheckFunctionExists.c.o
/usr/bin/cc    -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11   -o CMakeFiles/cmTC_60a71.dir/CheckFunctionExists.c.o   -c /usr/share/cmake-3.5/Modules/CheckFunctionExists.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_60a71
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_60a71.dir/link.txt --verbose=1
/usr/bin/cc   -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11    CMakeFiles/cmTC_60a71.dir/CheckFunctionExists.c.o  -o cmTC_60a71 -rdynamic -lpthread 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file unistd.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_85b58/fast"
/usr/bin/make -f CMakeFiles/cmTC_85b58.dir/build.make CMakeFiles/cmTC_85b58.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_85b58.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_85b58.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_85b58
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_85b58.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_85b58.dir/CheckIncludeFile.cxx.o  -o cmTC_85b58 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stdint.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_a935c/fast"
/usr/bin/make -f CMakeFiles/cmTC_a935c.dir/build.make CMakeFiles/cmTC_a935c.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_a935c.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_a935c.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_a935c
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_a935c.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_a935c.dir/CheckIncludeFile.cxx.o  -o cmTC_a935c -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file sys/types.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_70c8e/fast"
/usr/bin/make -f CMakeFiles/cmTC_70c8e.dir/build.make CMakeFiles/cmTC_70c8e.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_70c8e.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_70c8e.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_70c8e
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_70c8e.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_70c8e.dir/CheckIncludeFile.cxx.o  -o cmTC_70c8e -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file fnmatch.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_a8e60/fast"
/usr/bin/make -f CMakeFiles/cmTC_a8e60.dir/build.make CMakeFiles/cmTC_a8e60.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_a8e60.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_a8e60.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_a8e60
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_a8e60.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_a8e60.dir/CheckIncludeFile.cxx.o  -o cmTC_a8e60 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the include file stddef.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_5b29f/fast"
/usr/bin/make -f CMakeFiles/cmTC_5b29f.dir/build.make CMakeFiles/cmTC_5b29f.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_5b29f.dir/CheckIncludeFile.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_5b29f.dir/CheckIncludeFile.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTC_5b29f
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_5b29f.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_5b29f.dir/CheckIncludeFile.cxx.o  -o cmTC_5b29f -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining size of uint32_t passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_37872/fast"
/usr/bin/make -f CMakeFiles/cmTC_37872.dir/build.make CMakeFiles/cmTC_37872.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_37872.dir/uint32_t.cpp.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_37872.dir/uint32_t.cpp.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CheckTypeSize/uint32_t.cpp
Linking CXX executable cmTC_37872
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_37872.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_37872.dir/uint32_t.cpp.o  -o cmTC_37872 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the strtoll exist passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_1a414/fast"
/usr/bin/make -f CMakeFiles/cmTC_1a414.dir/build.make CMakeFiles/cmTC_1a414.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_1a414.dir/CheckSymbolExists.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized    -o CMakeFiles/cmTC_1a414.dir/CheckSymbolExists.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx
Linking CXX executable cmTC_1a414
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_1a414.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized     CMakeFiles/cmTC_1a414.dir/CheckSymbolExists.cxx.o  -o cmTC_1a414 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

File /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx:
/* */
#include <stdlib.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strtoll
  return ((int*)(&strtoll))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Performing C++ SOURCE FILE Test HAVE_CPUID_INFO succeeded with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_a1bf9/fast"
/usr/bin/make -f CMakeFiles/cmTC_a1bf9.dir/build.make CMakeFiles/cmTC_a1bf9.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_a1bf9.dir/src.cxx.o
/usr/bin/c++     -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11   -o CMakeFiles/cmTC_a1bf9.dir/src.cxx.o -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/src.cxx
Linking CXX executable cmTC_a1bf9
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_a1bf9.dir/link.txt --verbose=1
/usr/bin/c++   -std=c++11  -Werror -Wuninitialized -Winit-self -Wmaybe-uninitialized -Wall -DHAVE_CPUID_INFO -std=c++11    CMakeFiles/cmTC_a1bf9.dir/src.cxx.o  -o cmTC_a1bf9 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'

Return value: 1
Source file was:

// InstructionSet.cpp
// Compile by using: cl /EHsc /W4 InstructionSet.cpp
// processor: x86, x64
// Uses the __cpuid intrinsic to get information about
// CPU extended instruction set support.
//
// source origin:
// https://msdn.microsoft.com/en-us/library/hskdteyh.aspx
// https://gcc.gnu.org/git/?p=gcc.git;a=blob_plain;f=gcc/config/i386/driver-i386.c


#include <iostream>
#include <fstream>
#include <vector>
#include <bitset>
#include <array>
#include <string>
#ifdef WIN32
#include <intrin.h>
#else
#include <cpuid.h>
#include <string.h>
#endif

class InstructionSet
{
    // forward declarations
    class InstructionSet_Internal;

public:
    // getters
    static std::string Vendor(void) { return CPU_Rep.vendor_; }
    static std::string Brand(void) { return CPU_Rep.brand_; }

    static bool SSE3(void) { return CPU_Rep.f_1_ECX_[0]; }
    static bool PCLMULQDQ(void) { return CPU_Rep.f_1_ECX_[1]; }
    static bool MONITOR(void) { return CPU_Rep.f_1_ECX_[3]; }
    static bool SSSE3(void) { return CPU_Rep.f_1_ECX_[9]; }
    static bool FMA(void) { return CPU_Rep.f_1_ECX_[12]; }
    static bool CMPXCHG16B(void) { return CPU_Rep.f_1_ECX_[13]; }
    static bool SSE41(void) { return CPU_Rep.f_1_ECX_[19]; }
    static bool SSE42(void) { return CPU_Rep.f_1_ECX_[20]; }
    static bool MOVBE(void) { return CPU_Rep.f_1_ECX_[22]; }
    static bool POPCNT(void) { return CPU_Rep.f_1_ECX_[23]; }
    static bool AES(void) { return CPU_Rep.f_1_ECX_[25]; }
    static bool XSAVE(void) { return CPU_Rep.f_1_ECX_[26]; }
    static bool OSXSAVE(void) { return CPU_Rep.f_1_ECX_[27]; }
    static bool AVX(void) { return CPU_Rep.f_1_ECX_[28]; }
    static bool F16C(void) { return CPU_Rep.f_1_ECX_[29]; }
    static bool RDRAND(void) { return CPU_Rep.f_1_ECX_[30]; }

    static bool MSR(void) { return CPU_Rep.f_1_EDX_[5]; }
    static bool CX8(void) { return CPU_Rep.f_1_EDX_[8]; }
    static bool SEP(void) { return CPU_Rep.f_1_EDX_[11]; }
    static bool CMOV(void) { return CPU_Rep.f_1_EDX_[15]; }
    static bool CLFSH(void) { return CPU_Rep.f_1_EDX_[19]; }
    static bool MMX(void) { return CPU_Rep.f_1_EDX_[23]; }
    static bool FXSR(void) { return CPU_Rep.f_1_EDX_[24]; }
    static bool SSE(void) { return CPU_Rep.f_1_EDX_[25]; }
    static bool SSE2(void) { return CPU_Rep.f_1_EDX_[26]; }

    static bool FSGSBASE(void) { return CPU_Rep.f_7_EBX_[0]; }
    static bool BMI1(void) { return CPU_Rep.f_7_EBX_[3]; }
    static bool HLE(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[4]; }
    static bool AVX2(void) { return CPU_Rep.f_7_EBX_[5]; }
    static bool BMI2(void) { return CPU_Rep.f_7_EBX_[8]; }
    static bool ERMS(void) { return CPU_Rep.f_7_EBX_[9]; }
    static bool INVPCID(void) { return CPU_Rep.f_7_EBX_[10]; }
    static bool RTM(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_7_EBX_[11]; }
    static bool AVX512F(void) { return CPU_Rep.f_7_EBX_[16]; }
    static bool RDSEED(void) { return CPU_Rep.f_7_EBX_[18]; }
    static bool ADX(void) { return CPU_Rep.f_7_EBX_[19]; }
    static bool AVX512PF(void) { return CPU_Rep.f_7_EBX_[26]; }
    static bool AVX512ER(void) { return CPU_Rep.f_7_EBX_[27]; }
    static bool AVX512CD(void) { return CPU_Rep.f_7_EBX_[28]; }
    static bool SHA(void) { return CPU_Rep.f_7_EBX_[29]; }

    static bool PREFETCHWT1(void) { return CPU_Rep.f_7_ECX_[0]; }

    static bool LAHF(void) { return CPU_Rep.f_81_ECX_[0]; }
    static bool LZCNT(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_ECX_[5]; }
    static bool ABM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[5]; }
    static bool SSE4a(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[6]; }
    static bool XOP(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[11]; }
    static bool TBM(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_ECX_[21]; }

    static bool SYSCALL(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[11]; }
    static bool MMXEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[22]; }
    static bool RDTSCP(void) { return CPU_Rep.isIntel_ && CPU_Rep.f_81_EDX_[27]; }
    static bool _3DNOWEXT(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[30]; }
    static bool _3DNOW(void) { return CPU_Rep.isAMD_ && CPU_Rep.f_81_EDX_[31]; }

private:
    static const InstructionSet_Internal CPU_Rep;

    class InstructionSet_Internal
    {
    public:
        InstructionSet_Internal()
            : nIds_{ 0 },
            nExIds_{ 0 },
            isIntel_{ false },
            isAMD_{ false },
            f_1_ECX_{ 0 },
            f_1_EDX_{ 0 },
            f_7_EBX_{ 0 },
            f_7_ECX_{ 0 },
            f_81_ECX_{ 0 },
            f_81_EDX_{ 0 },
            data_{},
            extdata_{}
        {
#ifdef WIN32
            std::array<int, 4> cpui;
#else
            std::array<unsigned int, 4> cpui;
#endif

            // Calling __cpuid with 0x0 as the function_id argument
            // gets the number of the highest valid function ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0);
#else
            cpui[0] = __get_cpuid_max(0, &cpui[1]);
#endif
            nIds_ = cpui[0];

            for (int i = 0; i <= nIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif

                data_.push_back(cpui);
            }

            // Capture vendor string
            char vendor[0x20];
            memset(vendor, 0, sizeof(vendor));
            *reinterpret_cast<int*>(vendor + 0) = data_[0][1];
            *reinterpret_cast<int*>(vendor + 4) = data_[0][3];
            *reinterpret_cast<int*>(vendor + 8) = data_[0][2];
            vendor_ = vendor;
            if (vendor_ == "GenuineIntel")
            {
                isIntel_ = true;
            }
            else if (vendor_ == "AuthenticAMD")
            {
                isAMD_ = true;
            }

            // load bitset with flags for function 0x00000001
            if (nIds_ >= 1)
            {
                f_1_ECX_ = data_[1][2];
                f_1_EDX_ = data_[1][3];
            }

            // load bitset with flags for function 0x00000007
            if (nIds_ >= 7)
            {
                f_7_EBX_ = data_[7][1];
                f_7_ECX_ = data_[7][2];
            }

            // Calling __cpuid with 0x80000000 as the function_id argument
            // gets the number of the highest valid extended ID.
#ifdef WIN32
            __cpuid(cpui.data(), 0x80000000);
#else
            __cpuid(0x80000000, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
            nExIds_ = cpui[0];

            char brand[0x40];
            memset(brand, 0, sizeof(brand));

            for (int i = 0x80000000; i <= nExIds_; ++i)
            {
#ifdef WIN32
                __cpuidex(cpui.data(), i, 0);
#else
                __cpuid_count(i, 0, cpui[0], cpui[1], cpui[2], cpui[3]);
#endif
                extdata_.push_back(cpui);
            }

            // load bitset with flags for function 0x80000001
            if ((unsigned)nExIds_ >= 0x80000001)
            {
                f_81_ECX_ = extdata_[1][2];
                f_81_EDX_ = extdata_[1][3];
            }

            // Interpret CPU brand string if reported
            if ((unsigned)nExIds_ >= 0x80000004)
            {
                memcpy(brand +  0, extdata_[2].data(), sizeof(cpui));
                memcpy(brand + 16, extdata_[3].data(), sizeof(cpui));
                memcpy(brand + 32, extdata_[4].data(), sizeof(cpui));
                brand_ = brand;
            }
        };

        int nIds_;
        int nExIds_;
        std::string vendor_;
        std::string brand_;
        bool isIntel_;
        bool isAMD_;
        std::bitset<32> f_1_ECX_;
        std::bitset<32> f_1_EDX_;
        std::bitset<32> f_7_EBX_;
        std::bitset<32> f_7_ECX_;
        std::bitset<32> f_81_ECX_;
        std::bitset<32> f_81_EDX_;
#ifdef WIN32
        std::vector<std::array<int, 4>> data_;
        std::vector<std::array<int, 4>> extdata_;
#else
        std::vector<std::array<unsigned int, 4>> data_;
        std::vector<std::array<unsigned int, 4>> extdata_;
#endif
    };
};

// Initialize static member data
const InstructionSet::InstructionSet_Internal InstructionSet::CPU_Rep;

// Print out supported instruction set extensions
int main()
{
    std::ofstream fo("/opt/sample_release/inference_engine_samples_build/cpuid.txt");
    auto& outstream = fo;//std::cout;

    auto support_message = [&outstream](std::string isa_feature, bool is_supported) {
        outstream << isa_feature << (is_supported ? " supported" : " not supported") << std::endl;
    };

    std::cout << InstructionSet::Vendor() << std::endl;
    std::cout << InstructionSet::Brand() << std::endl;

    support_message("3DNOW",       InstructionSet::_3DNOW());
    support_message("3DNOWEXT",    InstructionSet::_3DNOWEXT());
    support_message("ABM",         InstructionSet::ABM());
    support_message("ADX",         InstructionSet::ADX());
    support_message("AES",         InstructionSet::AES());
    support_message("AVX",         InstructionSet::AVX());
    support_message("AVX2",        InstructionSet::AVX2());
    support_message("AVX512CD",    InstructionSet::AVX512CD());
    support_message("AVX512F",     InstructionSet::AVX512F());
    support_message("AVX512ER",    InstructionSet::AVX512ER());
    support_message("AVX512PF",    InstructionSet::AVX512PF());
    support_message("BMI1",        InstructionSet::BMI1());
    support_message("BMI2",        InstructionSet::BMI2());
    support_message("CLFSH",       InstructionSet::CLFSH());
    support_message("CMPXCHG16B",  InstructionSet::CMPXCHG16B());
    support_message("CX8",         InstructionSet::CX8());
    support_message("ERMS",        InstructionSet::ERMS());
    support_message("F16C",        InstructionSet::F16C());
    support_message("FMA",         InstructionSet::FMA());
    support_message("FSGSBASE",    InstructionSet::FSGSBASE());
    support_message("FXSR",        InstructionSet::FXSR());
    support_message("HLE",         InstructionSet::HLE());
    support_message("INVPCID",     InstructionSet::INVPCID());
    support_message("LAHF",        InstructionSet::LAHF());
    support_message("LZCNT",       InstructionSet::LZCNT());
    support_message("MMX",         InstructionSet::MMX());
    support_message("MMXEXT",      InstructionSet::MMXEXT());
    support_message("MONITOR",     InstructionSet::MONITOR());
    support_message("MOVBE",       InstructionSet::MOVBE());
    support_message("MSR",         InstructionSet::MSR());
    support_message("OSXSAVE",     InstructionSet::OSXSAVE());
    support_message("PCLMULQDQ",   InstructionSet::PCLMULQDQ());
    support_message("POPCNT",      InstructionSet::POPCNT());
    support_message("PREFETCHWT1", InstructionSet::PREFETCHWT1());
    support_message("RDRAND",      InstructionSet::RDRAND());
    support_message("RDSEED",      InstructionSet::RDSEED());
    support_message("RDTSCP",      InstructionSet::RDTSCP());
    support_message("RTM",         InstructionSet::RTM());
    support_message("SEP",         InstructionSet::SEP());
    support_message("SHA",         InstructionSet::SHA());
    support_message("SSE",         InstructionSet::SSE());
    support_message("SSE2",        InstructionSet::SSE2());
    support_message("SSE3",        InstructionSet::SSE3());
    support_message("SSE4.1",      InstructionSet::SSE41());
    support_message("SSE4.2",      InstructionSet::SSE42());
    support_message("SSE4a",       InstructionSet::SSE4a());
    support_message("SSSE3",       InstructionSet::SSSE3());
    support_message("SYSCALL",     InstructionSet::SYSCALL());
    support_message("TBM",         InstructionSet::TBM());
    support_message("XOP",         InstructionSet::XOP());
    support_message("XSAVE",       InstructionSet::XSAVE());
    return 0;
}

Determining if the include file pthread.h exists passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_ccfe9/fast"
/usr/bin/make -f CMakeFiles/cmTC_ccfe9.dir/build.make CMakeFiles/cmTC_ccfe9.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_ccfe9.dir/CheckIncludeFile.c.o
/usr/bin/cc    -std=c++11   -o CMakeFiles/cmTC_ccfe9.dir/CheckIncludeFile.c.o   -c /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp/CheckIncludeFile.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_ccfe9
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_ccfe9.dir/link.txt --verbose=1
/usr/bin/cc   -std=c++11    CMakeFiles/cmTC_ccfe9.dir/CheckIncludeFile.c.o  -o cmTC_ccfe9 -rdynamic 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


Determining if the function pthread_create exists in the pthread passed with the following output:
Change Dir: /opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_79c9f/fast"
/usr/bin/make -f CMakeFiles/cmTC_79c9f.dir/build.make CMakeFiles/cmTC_79c9f.dir/build
make[1]: Entering directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_79c9f.dir/CheckFunctionExists.c.o
/usr/bin/cc    -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11   -o CMakeFiles/cmTC_79c9f.dir/CheckFunctionExists.c.o   -c /usr/share/cmake-3.5/Modules/CheckFunctionExists.c
cc1: warning: command line option ‘-std=c++11’ is valid for C++/ObjC++ but not for C
Linking C executable cmTC_79c9f
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_79c9f.dir/link.txt --verbose=1
/usr/bin/cc   -DCHECK_FUNCTION_EXISTS=pthread_create -std=c++11    CMakeFiles/cmTC_79c9f.dir/CheckFunctionExists.c.o  -o cmTC_79c9f -rdynamic -lpthread 
make[1]: Leaving directory '/opt/sample_release/inference_engine_samples_build/CMakeFiles/CMakeTmp'


